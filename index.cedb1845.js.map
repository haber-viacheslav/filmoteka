{"mappings":"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","sources":["node_modules/@swc/helpers/lib/_class_extract_field_descriptor.js","node_modules/@swc/helpers/lib/_class_apply_descriptor_get.js","node_modules/@swc/helpers/lib/_check_private_redeclaration.js","node_modules/@swc/helpers/lib/_class_apply_descriptor_set.js","src/js/firebase/backend.js","src/js/user-service/userServ.js","src/js/modals/filmDetailsModal.js","src/js/helpers/renderFuncApi.js","src/js/checkers/genresChecker.js","src/js/helpers/fetchFilmsApi.js","node_modules/@swc/helpers/lib/_class_private_field_get.js","node_modules/@swc/helpers/lib/_class_private_field_init.js","node_modules/@swc/helpers/lib/_class_private_field_set.js","node_modules/axios/lib/utils.js","node_modules/axios/lib/helpers/bind.js","node_modules/axios/lib/core/Axios.js","node_modules/axios/lib/core/AxiosError.js","node_modules/buffer/index.js","node_modules/base64-js/index.js","node_modules/axios/lib/env/classes/FormData.js","node_modules/form-data/lib/browser.js","node_modules/ieee754/index.js","node_modules/axios/lib/helpers/toFormData.js","node_modules/axios/lib/helpers/AxiosURLSearchParams.js","node_modules/axios/lib/helpers/buildURL.js","node_modules/axios/lib/core/InterceptorManager.js","node_modules/axios/lib/platform/browser/index.js","node_modules/axios/lib/defaults/transitional.js","node_modules/axios/lib/platform/browser/classes/URLSearchParams.js","node_modules/axios/lib/platform/browser/classes/FormData.js","node_modules/axios/lib/helpers/toURLEncodedForm.js","node_modules/axios/lib/helpers/formDataToJSON.js","node_modules/axios/lib/defaults/index.js","node_modules/axios/lib/core/AxiosHeaders.js","node_modules/axios/lib/helpers/parseHeaders.js","node_modules/axios/lib/core/transformData.js","node_modules/axios/lib/cancel/isCancel.js","node_modules/axios/lib/cancel/CanceledError.js","node_modules/axios/lib/core/settle.js","node_modules/axios/lib/helpers/cookies.js","node_modules/axios/lib/helpers/combineURLs.js","node_modules/axios/lib/core/buildFullPath.js","node_modules/axios/lib/helpers/isAbsoluteURL.js","node_modules/axios/lib/helpers/isURLSameOrigin.js","node_modules/axios/lib/helpers/speedometer.js","node_modules/axios/lib/adapters/xhr.js","node_modules/axios/lib/helpers/parseProtocol.js","node_modules/axios/lib/adapters/adapters.js","node_modules/axios/lib/helpers/null.js","node_modules/axios/lib/core/dispatchRequest.js","node_modules/axios/lib/core/mergeConfig.js","node_modules/axios/lib/helpers/validator.js","node_modules/axios/lib/env/data.js","node_modules/axios/lib/cancel/CancelToken.js","node_modules/axios/lib/axios.js","node_modules/axios/lib/helpers/spread.js","node_modules/axios/lib/helpers/isAxiosError.js","node_modules/axios/index.js","node_modules/basiclightbox/dist/basicLightbox.min.js","src/js/modals/showTrailer.js","src/js/checkers/filmTrailerChecker.js","src/js/checkers/filmDetailesChecker.js","src/js/user-service/postUserIntoDb.js","node_modules/@firebase/database/src/core/storage/DOMStorageWrapper.ts","node_modules/@firebase/database/src/core/storage/MemoryStorage.ts","node_modules/@firebase/database/src/core/storage/storage.ts","node_modules/@firebase/database/src/core/util/util.ts","node_modules/@firebase/database/src/core/AppCheckTokenProvider.ts","node_modules/@firebase/database/src/core/AuthTokenProvider.ts","node_modules/@firebase/database/src/core/RepoInfo.ts","node_modules/@firebase/database/src/core/stats/StatsCollection.ts","node_modules/@firebase/database/src/core/stats/StatsManager.ts","node_modules/@firebase/database/src/realtime/polling/PacketReceiver.ts","node_modules/@firebase/database/src/realtime/BrowserPollConnection.ts","node_modules/@firebase/database/src/realtime/WebSocketConnection.ts","node_modules/@firebase/database/src/realtime/TransportManager.ts","node_modules/@firebase/database/src/realtime/Connection.ts","node_modules/@firebase/database/src/core/ServerActions.ts","node_modules/@firebase/database/src/core/util/EventEmitter.ts","node_modules/@firebase/database/src/core/util/OnlineMonitor.ts","node_modules/@firebase/database/src/core/util/Path.ts","node_modules/@firebase/database/src/core/util/VisibilityMonitor.ts","node_modules/@firebase/database/src/core/PersistentConnection.ts","node_modules/@firebase/database/src/core/snap/Node.ts","node_modules/@firebase/database/src/core/snap/indexes/Index.ts","node_modules/@firebase/database/src/core/snap/indexes/KeyIndex.ts","node_modules/@firebase/database/src/core/util/SortedMap.ts","node_modules/@firebase/database/src/core/snap/comparators.ts","node_modules/@firebase/database/src/core/snap/snap.ts","node_modules/@firebase/database/src/core/snap/LeafNode.ts","node_modules/@firebase/database/src/core/snap/indexes/PriorityIndex.ts","node_modules/@firebase/database/src/core/snap/childSet.ts","node_modules/@firebase/database/src/core/snap/IndexMap.ts","node_modules/@firebase/database/src/core/snap/ChildrenNode.ts","node_modules/@firebase/database/src/core/snap/nodeFromJSON.ts","node_modules/@firebase/database/src/core/snap/indexes/PathIndex.ts","node_modules/@firebase/database/src/core/snap/indexes/ValueIndex.ts","node_modules/@firebase/database/src/core/view/Change.ts","node_modules/@firebase/database/src/core/view/filter/IndexedFilter.ts","node_modules/@firebase/database/src/core/view/filter/RangedFilter.ts","node_modules/@firebase/database/src/core/view/filter/LimitedFilter.ts","node_modules/@firebase/database/src/core/view/QueryParams.ts","node_modules/@firebase/database/src/core/ReadonlyRestClient.ts","node_modules/@firebase/database/src/core/SnapshotHolder.ts","node_modules/@firebase/database/src/core/SparseSnapshotTree.ts","node_modules/@firebase/database/src/core/stats/StatsReporter.ts","node_modules/@firebase/database/src/core/stats/StatsListener.ts","node_modules/@firebase/database/src/core/operation/Operation.ts","node_modules/@firebase/database/src/core/operation/AckUserWrite.ts","node_modules/@firebase/database/src/core/operation/ListenComplete.ts","node_modules/@firebase/database/src/core/operation/Overwrite.ts","node_modules/@firebase/database/src/core/operation/Merge.ts","node_modules/@firebase/database/src/core/view/CacheNode.ts","node_modules/@firebase/database/src/core/view/EventGenerator.ts","node_modules/@firebase/database/src/core/view/ViewCache.ts","node_modules/@firebase/database/src/core/util/ImmutableTree.ts","node_modules/@firebase/database/src/core/CompoundWrite.ts","node_modules/@firebase/database/src/core/WriteTree.ts","node_modules/@firebase/database/src/core/view/CompleteChildSource.ts","node_modules/@firebase/database/src/core/view/ViewProcessor.ts","node_modules/@firebase/database/src/core/view/View.ts","node_modules/@firebase/database/src/core/SyncPoint.ts","node_modules/@firebase/database/src/core/SyncTree.ts","node_modules/@firebase/database/src/core/util/ServerValues.ts","node_modules/@firebase/database/src/core/util/Tree.ts","node_modules/@firebase/database/src/core/util/validation.ts","node_modules/@firebase/database/src/core/view/EventQueue.ts","node_modules/@firebase/database/src/core/Repo.ts","node_modules/@firebase/database/src/core/util/libs/parser.ts","node_modules/@firebase/database/src/core/util/NextPushId.ts","node_modules/@firebase/database/src/core/view/Event.ts","node_modules/@firebase/database/src/core/view/EventRegistration.ts","node_modules/@firebase/database/src/api/OnDisconnect.ts","node_modules/@firebase/database/src/api/Reference_impl.ts","node_modules/@firebase/database/src/api/Database.ts","node_modules/@firebase/database/src/register.ts","node_modules/@firebase/database/src/api/ServerValue.ts","node_modules/@firebase/database/src/api/Transaction.ts","node_modules/@firebase/database/src/api/test_access.ts","node_modules/@firebase/database/src/realtime/Constants.ts","node_modules/@firebase/database/src/index.ts","src/js/user-service/checkerDbCollectionFilms.js","src/js/firebase/auth.js","src/js/user-service/userAuthChecker.js","src/js/main/searchMovie.js","src/js/checkers/filmSearchChecker.js","src/js/helpers/spinnerApi.js","node_modules/notiflix/build/notiflix-loading-aio.js","src/js/spinner/spinner.js","src/js/main/renderMainMarkup.js","src/js/pagination/createPages.js","src/js/helpers/genres.js","src/js/helpers/pageChange.js","src/js/main.js","src/js/checkers/pageOnLoadCheker.js","src/js/pagination/pagination.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classExtractFieldDescriptor;\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classApplyDescriptorGet;\nfunction _classApplyDescriptorGet(receiver, descriptor) {\n    if (descriptor.get) {\n        return descriptor.get.call(receiver);\n    }\n    return descriptor.value;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _checkPrivateRedeclaration;\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n    if (privateCollection.has(obj)) {\n        throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classApplyDescriptorSet;\nfunction _classApplyDescriptorSet(receiver, descriptor, value) {\n    if (descriptor.set) {\n        descriptor.set.call(receiver, value);\n    } else {\n        if (!descriptor.writable) {\n            // This should only throw in strict mode, but class bodies are\n            // always strict and private fields can only be used inside\n            // class bodies.\n            throw new TypeError(\"attempted to set read only private field\");\n        }\n        descriptor.value = value;\n    }\n}\n","import { app } from './initFirebase';\nimport '../user-service/userServ';\n// Import the functions you need from the SDKs you need\nimport { getDatabase, ref, set, onValue } from 'firebase/database';\n// import { getDatabase, ref, } from 'firebase/database'; // закоментировал, перезаписан\nimport { getUserFilmsData } from '../user-service/userServ';\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n","import { async } from '@firebase/util';\nimport {\n  getAuth,\n  signInWithPopup,\n  GoogleAuthProvider,\n  signOut,\n} from 'firebase/auth';\nimport { app } from '../firebase/initFirebase';\nimport { currentFilmId } from '../modals/filmDetailsModal';\nimport { getUserDataById, postFilmToDatabase } from './postUserIntoDb';\n\nfunction addFilmToQueque(e) {\n  e.preventDefault();\n  const userId = getCurrentUser().uid;\n  console.log(userId);\n  postFilmToDatabase({ id: userId, currentFilmId, reference: 'userQueue' });\n}\nfunction addFilmToWatched(e) {\n  const userId = getCurrentUser().uid;\n\n  e.preventDefault();\n  postFilmToDatabase({ id: userId, currentFilmId, reference: 'userWatched' });\n}\nfunction getCurrentUser() {\n  const auth = getAuth(app);\n  const user = auth.currentUser;\n  if (user !== null) {\n    console.log('get user');\n    console.log(user);\n    return user;\n  }\n  console.log('no user');\n}\n// getCurrentUser();\n// console.log(getCurrentUser());\nfunction getUserFilmsData(reference) {\n  const userId = getCurrentUser().uid;\n  getUserDataById(userId, reference);\n}\n// getUserFilmsData();\n\nexport { addFilmToQueque, addFilmToWatched, getUserFilmsData };\n","import RenderApi from '../helpers/renderFuncApi';\nimport FetchFilmsApi from '../helpers/fetchFilmsApi';\nimport * as basicLightbox from 'basiclightbox';\nimport onShowTrailer from './showTrailer';\nimport { checkFilmDetailes } from '../checkers/filmDetailesChecker';\nimport {\n  addFilmToQueque,\n  addFilmToWatched,\n  getUserFilmsData,\n} from '../user-service/userServ';\n\nconst fetchApi = new FetchFilmsApi();\nconst renderApi = new RenderApi();\nexport let currentFilmId = '';\n\nexport async function onShowFilmModal(event) {\n  if (!event.target.classList.contains('film__img')) {\n    return;\n  }\n\n  document.body.style.overflow = 'hidden';\n\n  event.currentTarget.removeEventListener('click', onShowFilmModal);\n\n  const filmId = event.target.dataset.id;\n\n  const moreInfo = await fetchApi.getCurrentFilm({ id: filmId });\n\n  const moreInfoObj = checkFilmDetailes(moreInfo.data);\n\n  const instance = basicLightbox.create(\n    renderApi.createModalFilmDetails(moreInfoObj, filmId),\n    {\n      onShow: instance => {\n        instance.element().querySelector('.film-modal__close').onclick =\n          instance.close;\n      },\n\n      onClose: instance => {\n        document.body.style.overflow = 'visible';\n        event.target\n          .closest('.films__list')\n          .addEventListener('click', onShowFilmModal);\n      },\n    }\n  );\n\n  instance.show();\n  //\n  //\n  //\n\n  const addToQueue = document.querySelector('.film-modal__btn--queue');\n  const addToWatch = document.querySelector('.film-modal__btn--watched');\n  currentFilmId = filmId;\n  addToQueue.addEventListener('click', addFilmToQueque);\n  addToWatch.addEventListener('click', addFilmToWatched);\n  //\n  // getUserFilmsData('userQueue');\n  const obj = getUserFilmsData('userQueue');\n  console.log(`obj = ${obj}`);\n  if (!obj) {\n    return;\n  } else {\n    const value = Object.values(obj);\n    console.log(value);\n  }\n  //\n  //\n  document.addEventListener('keydown', onPressEsc, { once: true });\n\n  function onPressEsc(e) {\n    if (e.code !== 'Escape') {\n      return;\n    }\n\n    instance.close();\n  }\n\n  // Trailer\n  const trailerBtn = document.querySelector('.film-modal__trailer');\n  trailerBtn.addEventListener('click', onShowTrailer);\n  //\n}\n","import refsApiServ from './refsApiServ';\nimport { checkGenreList } from '../checkers/genresChecker';\n// import { genres } from './genres'\n\nclass RenderApi {\n  constructor() {}\n\n  createFilmCardsMarkup(data, genres) {\n    // console.log(data, genres)\n    return data\n      .map(({ poster_path, title, genre_ids, release_date, id }) => {\n        const filmGengres = checkGenreList(genre_ids, genres, release_date);\n\n        const { date, genresOfCurrentFilm } = filmGengres;\n\n        return ` <li class=\"film\">\n        <div class=\"film__thumb\">\n          <img data-id='${id}' class=\"film__img\" src=\"https://image.tmdb.org/t/p/w500/${poster_path}\" alt=\"${title}\" />\n        </div>\n        <div class=\"film__wrap\">\n          <h2 class=\"film__title\">${title}</h2>\n          <p class=\"film__genres\">${genresOfCurrentFilm} | ${date}</p>\n        </div>\n      </li>`;\n      })\n      .join('');\n  }\n  createAuthorizatedUserHeaderMarkup() {\n    return `<li class=\"menu__item\">\n            <a\n              href=\"./index.html\"\n              target=\"_self\"\n              class=\"menu__link menu__link--current\"\n              >HOME</a\n            >\n          </li>\n          <li class=\"menu__item\">\n            <a href=\"./user-page.html\" target=\"_self\" class=\"menu__link \"\n              >MY LIBRARY</a\n            >\n          </li>\n          <li class=\"menu__item\">\n            <a target=\"_self\" class=\"menu__link menu__logout\">LOG OUT</a>\n          </li>`;\n  }\n\n  createModalFilmDetails(\n    {\n      poster_path,\n      title,\n      fixedGenres,\n      vote_count,\n      fixedVote,\n      fixedPopularity,\n      overview,\n    },\n    filmId\n  ) {\n    return `\n        <div class=\"film__modal\">\n        \n      <button class=\"film-modal__close\">X</button>\n    \n          <div class=\"film-modal__thumb\">\n          <img\n            class=\"film-modal__img\"\n            src=\"https://image.tmdb.org/t/p/w500/${poster_path}\"\n            alt=\"${title}\"\n          />\n          </div>\n    \n          <div class=\"film-modal__text-wrap\">\n          <h2 class=\"film-modal__title\">${title}</h2>\n    \n          <ul class=\"film-modal__list-characteristic\">\n            <li class=\"film-modal__item-characteristic\">\n              <p class=\"film-modal__characteristic-text\">\n                <span class=\"characteristic__name characteristic__name--vote\"\n                  >Vote / Votes</span\n                ><span class=\"characteristic__value characteristic__value--vote\">\n                <span class=\"characteristic__vote\">${fixedVote}</span> / \n                <span class=\"characteristic__vote characteristic__vote--count\">${vote_count}</span>\n                </span>\n              </p>\n            </li>\n            <li class=\"film-modal__item-characteristic\">\n              <p class=\"film-modal__characteristic-text\">\n                <span class=\"characteristic__name characteristic__name--popularity\"\n                  >Popularity</span\n                ><span class=\"characteristic__value\">${fixedPopularity}</span>\n              </p>\n            </li>\n            <li class=\"film-modal__item-characteristic\">\n              <p class=\"film-modal__characteristic-text\">\n                <span class=\"characteristic__name characteristic__name--title\"\n                  >Original Title</span\n                ><span class=\"characteristic__value\">${title}</span>\n              </p>\n            </li>\n            <li class=\"film-modal__item-characteristic\">\n              <p class=\"film-modal__characteristic-text\">\n                <span class=\"characteristic__name characteristic__name--genre\"\n                  >Genre</span\n                ><span class=\"characteristic__value\">${fixedGenres}</span>\n              </p>\n            </li>\n          </ul>\n    \n          <h3 class=\"film-modal__about-film-title\">About</h3>\n          <p class=\"film-modal__about-film-text\"> ${overview}\n          </p>\n    \n          <button class=\"film-modal__trailer\" data-id=\"${filmId} aria-lable=\"youtube\"><span class=\"film-modal__sumbol\">&#9658;</span></button>\n    \n          <div class=\"film-modal__wrap-btn flex\">\n            <button class=\"film-modal__btn film-modal__btn--watched\">\n              add to Watched\n            </button>\n            <button class=\"film-modal__btn film-modal__btn--queue\">\n              add to queue\n            </button>\n          </div>\n         </div>\n        </div>\n    `;\n  }\n\n  createModalFilmTrailer(key) {\n    return `\n    <iframe class='film-modal__iframe' src=\"https://www.youtube.com/embed/${key}\" frameborder=\"0\"></iframe>\n`;\n  }\n  createModalWithoutFilmTrailer() {\n    return `<div class=\"empty\"><p class='empty__text'>Sorry, but this film don't have trailer :(</p></div>\n    `;\n  }\n  //1 - Enter your selector like: \".films-list\",\n  //2 - Enter true or false to activate innerHtml before insertAdjacentHTML\n  //3- Enter innerHtml value for default use -  ''\n  //4 - Enter insertAdjecentHtml type for default use - 'beforeend'\n  //5 - Enter createMarkup function that already has been created and put into parameters data as you need! like: { createMarkypFunc:  createMoreFi lmDetails(fetchToFilmsData()) }\n  renderMarkup({\n    selector,\n    innerHtml = false,\n    innerHTMLMarkup = '',\n    insAdHtmltype = 'beforeend',\n    createMarkypFunc,\n  }) {\n    const elem = document.querySelector(selector);\n    // console.log();\n    if (innerHtml) {\n      elem.innerHTML = innerHTMLMarkup;\n    }\n    elem.insertAdjacentHTML(insAdHtmltype, createMarkypFunc);\n  }\n}\n\nexport default RenderApi;\n//  <div class=\"example\">\n//\n// </div>;\n","// \n\nexport function checkGenreList(genre_ids, genres, release_date) {\n  let genreIsMany = null;\n  let maxGenreIds = genre_ids;\n  \n  // console.log(maxGenreIds)\n  if (genre_ids.length > 2) {\n    genreIsMany = true;\n    maxGenreIds = genre_ids.slice(0, 2);\n  } else {\n    genreIsMany = false;\n  }\n\n  const ArrayGenresOfCurrentFilm = maxGenreIds.map(genre_id => {\n    return genres.find(oneGenre => oneGenre.id === genre_id);\n  });\n  let genresOfCurrentFilm = ArrayGenresOfCurrentFilm.map(\n    oneGenre => oneGenre.name\n  ).join(', ');\n\n  if (genreIsMany) {\n    genresOfCurrentFilm += ', Other';\n  }\n\n  const date = release_date.slice(0, 4);\n\n  return { date, genresOfCurrentFilm };\n}\n","import axios from 'axios';\n\nclass FetchFilmsApi {\n\n  #API_KEY;\n  #totalPages;\n  constructor(config = { baseURL: 'https://api.themoviedb.org/3/' }) {\n    this.query = '';\n    this.config = config;\n    this.#API_KEY = '76cbb606f190fc237086ec33f1fd98a3';\n\n    this.page = 1;\n    this.#totalPages = null;\n  }\n  async fetchWithAllFilmsData({ mediaType, timeWindow }) {\n    const resp = await axios.get(\n      `trending/${mediaType}/${timeWindow}?api_key=${this.#API_KEY}&page=${\n        this.page\n      }`,\n      this.config\n    );\n\n    return resp;\n  }\n  async getAllFilmsData({ mediaType = 'movie', timeWindow = 'day' }) {\n    try {\n      const resp = await this.fetchWithAllFilmsData({\n        \n        mediaType,\n        timeWindow,\n      });\n    // console.log('day', resp);\n      this.#totalPages = resp.data.total_pages;\n      //\n      //\n      return resp;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async fetchWithCurrentFilm({ mediaType, id }) {\n    const resp = await axios.get(\n      `${mediaType}/${id}?api_key=${this.#API_KEY} `,\n      this.config\n    );\n\n    return resp;\n  }\n  async getCurrentFilm({ mediaType = 'movie', id }) {\n    try {\n      const resp = await this.fetchWithCurrentFilm({\n        mediaType,\n        id,\n      });\n      //\n      //\n      return resp;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async fetchFilmTrailerById({ mediaType, id }) {\n    const resp = await axios.get(\n      `${mediaType}/${id}/videos?api_key=${this.#API_KEY} `,\n      this.config\n    );\n\n    return resp;\n  }\n  async getFilmTrailerById({ mediaType = 'movie', id }) {\n    try {\n      const resp = await this.fetchFilmTrailerById({\n        mediaType,\n        id,\n      });\n      //\n      //\n      return resp;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async fetchWithSearchFilmData({ mediaType, lang, page, include_adult }) {\n    const resp = await axios.get(\n      `search/${mediaType}?api_key=${this.#API_KEY}&language=${lang}&query=${\n        this.query\n      }&page=${page}&include_adult=${include_adult}`,\n      this.config\n    );\n\n    return resp;\n  }\n\n  //\n  //\n  async fetchGenresList({ mediaType, genreType, page }) {\n    const resp = await axios.get(\n      `genre/${mediaType}/${genreType}?api_key=${this.#API_KEY}&page=${page}`,\n      this.config\n    );\n    // console.log('fetchGenreslist', resp)\n    return resp;\n  }\n  // // //\n  async getGenresList({ mediaType = 'movie', genreType = 'list', page = '1' }) {\n    try {\n      const resp = await this.fetchGenresList({ mediaType, genreType, page });\n      // console.log('genreType', resp);\n      return resp;\n      \n    } catch (error) {\n      console.log(error);\n    }\n  }\n  \n  // //\n\n  async getSearchFilmsData({\n    mediaType = 'movie',\n    lang = 'en-US',\n    page = 1,\n    include_adult = false,\n  }) {\n    try {\n      const resp = await this.fetchWithSearchFilmData({\n        mediaType,\n        lang,\n        page,\n        include_adult,\n      });\n      return resp;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  incrementPage({ step = 1 }) {\n    this.page += step;\n  }\n  get actualPage() {\n    return this.page;\n  }\n  set actualPage(newPage) {\n    this.page = newPage;\n  }\n  get actualQuery() {\n    return this.query;\n  }\n  set actualQuery(newQuery) {\n    return (this.query = newQuery.trim());\n  }\n  get totalPages() {\n    return this.#totalPages;\n  }\n  set totalPages(newValue) {\n    this.#totalPages = newValue;\n  }\n}\n// const api = new FetchFilmsApi();\n\n// // console.log((api.actualQuery = 'asfas       s     '));\n// console.log(api.config);\nexport default FetchFilmsApi;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classPrivateFieldGet;\nvar _classExtractFieldDescriptor = _interopRequireDefault(require(\"./_class_extract_field_descriptor\"));\nvar _classApplyDescriptorGet = _interopRequireDefault(require(\"./_class_apply_descriptor_get\"));\nfunction _classPrivateFieldGet(receiver, privateMap) {\n    var descriptor = (0, _classExtractFieldDescriptor).default(receiver, privateMap, \"get\");\n    return (0, _classApplyDescriptorGet).default(receiver, descriptor);\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classPrivateFieldInit;\nvar _checkPrivateRedeclaration = _interopRequireDefault(require(\"./_check_private_redeclaration\"));\nfunction _classPrivateFieldInit(obj, privateMap, value) {\n    (0, _checkPrivateRedeclaration).default(obj, privateMap);\n    privateMap.set(obj, value);\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classPrivateFieldSet;\nvar _classExtractFieldDescriptor = _interopRequireDefault(require(\"./_class_extract_field_descriptor\"));\nvar _classApplyDescriptorSet = _interopRequireDefault(require(\"./_class_apply_descriptor_set\"));\nfunction _classPrivateFieldSet(receiver, privateMap, value) {\n    var descriptor = (0, _classExtractFieldDescriptor).default(receiver, privateMap, \"set\");\n    (0, _classApplyDescriptorSet).default(receiver, descriptor, value);\n    return value;\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","'use strict';\n\nimport bind from './helpers/bind.js';\n\n// utils is a library of generic helper functions non-specific to axios\n\nconst {toString} = Object.prototype;\nconst {getPrototypeOf} = Object;\n\nconst kindOf = (cache => thing => {\n    const str = toString.call(thing);\n    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n})(Object.create(null));\n\nconst kindOfTest = (type) => {\n  type = type.toLowerCase();\n  return (thing) => kindOf(thing) === type\n}\n\nconst typeOfTest = type => thing => typeof thing === type;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n *\n * @returns {boolean} True if value is an Array, otherwise false\n */\nconst {isArray} = Array;\n\n/**\n * Determine if a value is undefined\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nconst isUndefined = typeOfTest('undefined');\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nconst isArrayBuffer = kindOfTest('ArrayBuffer');\n\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  let result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a String, otherwise false\n */\nconst isString = typeOfTest('string');\n\n/**\n * Determine if a value is a Function\n *\n * @param {*} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nconst isFunction = typeOfTest('function');\n\n/**\n * Determine if a value is a Number\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Number, otherwise false\n */\nconst isNumber = typeOfTest('number');\n\n/**\n * Determine if a value is an Object\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an Object, otherwise false\n */\nconst isObject = (thing) => thing !== null && typeof thing === 'object';\n\n/**\n * Determine if a value is a Boolean\n *\n * @param {*} thing The value to test\n * @returns {boolean} True if value is a Boolean, otherwise false\n */\nconst isBoolean = thing => thing === true || thing === false;\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a plain Object, otherwise false\n */\nconst isPlainObject = (val) => {\n  if (kindOf(val) !== 'object') {\n    return false;\n  }\n\n  const prototype = getPrototypeOf(val);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Date, otherwise false\n */\nconst isDate = kindOfTest('Date');\n\n/**\n * Determine if a value is a File\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFile = kindOfTest('File');\n\n/**\n * Determine if a value is a Blob\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nconst isBlob = kindOfTest('Blob');\n\n/**\n * Determine if a value is a FileList\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFileList = kindOfTest('FileList');\n\n/**\n * Determine if a value is a Stream\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nconst isStream = (val) => isObject(val) && isFunction(val.pipe);\n\n/**\n * Determine if a value is a FormData\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nconst isFormData = (thing) => {\n  const pattern = '[object FormData]';\n  return thing && (\n    (typeof FormData === 'function' && thing instanceof FormData) ||\n    toString.call(thing) === pattern ||\n    (isFunction(thing.toString) && thing.toString() === pattern)\n  );\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nconst isURLSearchParams = kindOfTest('URLSearchParams');\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n *\n * @returns {String} The String freed of excess whitespace\n */\nconst trim = (str) => str.trim ?\n  str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n *\n * @param {Boolean} [allOwnKeys = false]\n * @returns {any}\n */\nfunction forEach(obj, fn, {allOwnKeys = false} = {}) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  let i;\n  let l;\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);\n    const len = keys.length;\n    let key;\n\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      fn.call(null, obj[key], key, obj);\n    }\n  }\n}\n\nfunction findKey(obj, key) {\n  key = key.toLowerCase();\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let _key;\n  while (i-- > 0) {\n    _key = keys[i];\n    if (key === _key.toLowerCase()) {\n      return _key;\n    }\n  }\n  return null;\n}\n\nconst _global = typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self;\n\nconst isContextDefined = (context) => !isUndefined(context) && context !== _global;\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n *\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  const {caseless} = isContextDefined(this) && this || {};\n  const result = {};\n  const assignValue = (val, key) => {\n    const targetKey = caseless && findKey(result, key) || key;\n    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {\n      result[targetKey] = merge(result[targetKey], val);\n    } else if (isPlainObject(val)) {\n      result[targetKey] = merge({}, val);\n    } else if (isArray(val)) {\n      result[targetKey] = val.slice();\n    } else {\n      result[targetKey] = val;\n    }\n  }\n\n  for (let i = 0, l = arguments.length; i < l; i++) {\n    arguments[i] && forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n *\n * @param {Boolean} [allOwnKeys]\n * @returns {Object} The resulting value of object a\n */\nconst extend = (a, b, thisArg, {allOwnKeys}= {}) => {\n  forEach(b, (val, key) => {\n    if (thisArg && isFunction(val)) {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  }, {allOwnKeys});\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n *\n * @returns {string} content value without BOM\n */\nconst stripBOM = (content) => {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\n/**\n * Inherit the prototype methods from one constructor into another\n * @param {function} constructor\n * @param {function} superConstructor\n * @param {object} [props]\n * @param {object} [descriptors]\n *\n * @returns {void}\n */\nconst inherits = (constructor, superConstructor, props, descriptors) => {\n  constructor.prototype = Object.create(superConstructor.prototype, descriptors);\n  constructor.prototype.constructor = constructor;\n  Object.defineProperty(constructor, 'super', {\n    value: superConstructor.prototype\n  });\n  props && Object.assign(constructor.prototype, props);\n}\n\n/**\n * Resolve object with deep prototype chain to a flat object\n * @param {Object} sourceObj source object\n * @param {Object} [destObj]\n * @param {Function|Boolean} [filter]\n * @param {Function} [propFilter]\n *\n * @returns {Object}\n */\nconst toFlatObject = (sourceObj, destObj, filter, propFilter) => {\n  let props;\n  let i;\n  let prop;\n  const merged = {};\n\n  destObj = destObj || {};\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  if (sourceObj == null) return destObj;\n\n  do {\n    props = Object.getOwnPropertyNames(sourceObj);\n    i = props.length;\n    while (i-- > 0) {\n      prop = props[i];\n      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {\n        destObj[prop] = sourceObj[prop];\n        merged[prop] = true;\n      }\n    }\n    sourceObj = filter !== false && getPrototypeOf(sourceObj);\n  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\n\n  return destObj;\n}\n\n/**\n * Determines whether a string ends with the characters of a specified string\n *\n * @param {String} str\n * @param {String} searchString\n * @param {Number} [position= 0]\n *\n * @returns {boolean}\n */\nconst endsWith = (str, searchString, position) => {\n  str = String(str);\n  if (position === undefined || position > str.length) {\n    position = str.length;\n  }\n  position -= searchString.length;\n  const lastIndex = str.indexOf(searchString, position);\n  return lastIndex !== -1 && lastIndex === position;\n}\n\n\n/**\n * Returns new array from array like object or null if failed\n *\n * @param {*} [thing]\n *\n * @returns {?Array}\n */\nconst toArray = (thing) => {\n  if (!thing) return null;\n  if (isArray(thing)) return thing;\n  let i = thing.length;\n  if (!isNumber(i)) return null;\n  const arr = new Array(i);\n  while (i-- > 0) {\n    arr[i] = thing[i];\n  }\n  return arr;\n}\n\n/**\n * Checking if the Uint8Array exists and if it does, it returns a function that checks if the\n * thing passed in is an instance of Uint8Array\n *\n * @param {TypedArray}\n *\n * @returns {Array}\n */\n// eslint-disable-next-line func-names\nconst isTypedArray = (TypedArray => {\n  // eslint-disable-next-line func-names\n  return thing => {\n    return TypedArray && thing instanceof TypedArray;\n  };\n})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));\n\n/**\n * For each entry in the object, call the function with the key and value.\n *\n * @param {Object<any, any>} obj - The object to iterate over.\n * @param {Function} fn - The function to call for each entry.\n *\n * @returns {void}\n */\nconst forEachEntry = (obj, fn) => {\n  const generator = obj && obj[Symbol.iterator];\n\n  const iterator = generator.call(obj);\n\n  let result;\n\n  while ((result = iterator.next()) && !result.done) {\n    const pair = result.value;\n    fn.call(obj, pair[0], pair[1]);\n  }\n}\n\n/**\n * It takes a regular expression and a string, and returns an array of all the matches\n *\n * @param {string} regExp - The regular expression to match against.\n * @param {string} str - The string to search.\n *\n * @returns {Array<boolean>}\n */\nconst matchAll = (regExp, str) => {\n  let matches;\n  const arr = [];\n\n  while ((matches = regExp.exec(str)) !== null) {\n    arr.push(matches);\n  }\n\n  return arr;\n}\n\n/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */\nconst isHTMLForm = kindOfTest('HTMLFormElement');\n\nconst toCamelCase = str => {\n  return str.toLowerCase().replace(/[_-\\s]([a-z\\d])(\\w*)/g,\n    function replacer(m, p1, p2) {\n      return p1.toUpperCase() + p2;\n    }\n  );\n};\n\n/* Creating a function that will check if an object has a property. */\nconst hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);\n\n/**\n * Determine if a value is a RegExp object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a RegExp object, otherwise false\n */\nconst isRegExp = kindOfTest('RegExp');\n\nconst reduceDescriptors = (obj, reducer) => {\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  const reducedDescriptors = {};\n\n  forEach(descriptors, (descriptor, name) => {\n    if (reducer(descriptor, name, obj) !== false) {\n      reducedDescriptors[name] = descriptor;\n    }\n  });\n\n  Object.defineProperties(obj, reducedDescriptors);\n}\n\n/**\n * Makes all methods read-only\n * @param {Object} obj\n */\n\nconst freezeMethods = (obj) => {\n  reduceDescriptors(obj, (descriptor, name) => {\n    // skip restricted props in strict mode\n    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {\n      return false;\n    }\n\n    const value = obj[name];\n\n    if (!isFunction(value)) return;\n\n    descriptor.enumerable = false;\n\n    if ('writable' in descriptor) {\n      descriptor.writable = false;\n      return;\n    }\n\n    if (!descriptor.set) {\n      descriptor.set = () => {\n        throw Error('Can not rewrite read-only method \\'' + name + '\\'');\n      };\n    }\n  });\n}\n\nconst toObjectSet = (arrayOrString, delimiter) => {\n  const obj = {};\n\n  const define = (arr) => {\n    arr.forEach(value => {\n      obj[value] = true;\n    });\n  }\n\n  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));\n\n  return obj;\n}\n\nconst noop = () => {}\n\nconst toFiniteNumber = (value, defaultValue) => {\n  value = +value;\n  return Number.isFinite(value) ? value : defaultValue;\n}\n\nconst toJSONObject = (obj) => {\n  const stack = new Array(10);\n\n  const visit = (source, i) => {\n\n    if (isObject(source)) {\n      if (stack.indexOf(source) >= 0) {\n        return;\n      }\n\n      if(!('toJSON' in source)) {\n        stack[i] = source;\n        const target = isArray(source) ? [] : {};\n\n        forEach(source, (value, key) => {\n          const reducedValue = visit(value, i + 1);\n          !isUndefined(reducedValue) && (target[key] = reducedValue);\n        });\n\n        stack[i] = undefined;\n\n        return target;\n      }\n    }\n\n    return source;\n  }\n\n  return visit(obj, 0);\n}\n\nexport default {\n  isArray,\n  isArrayBuffer,\n  isBuffer,\n  isFormData,\n  isArrayBufferView,\n  isString,\n  isNumber,\n  isBoolean,\n  isObject,\n  isPlainObject,\n  isUndefined,\n  isDate,\n  isFile,\n  isBlob,\n  isRegExp,\n  isFunction,\n  isStream,\n  isURLSearchParams,\n  isTypedArray,\n  isFileList,\n  forEach,\n  merge,\n  extend,\n  trim,\n  stripBOM,\n  inherits,\n  toFlatObject,\n  kindOf,\n  kindOfTest,\n  endsWith,\n  toArray,\n  forEachEntry,\n  matchAll,\n  isHTMLForm,\n  hasOwnProperty,\n  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection\n  reduceDescriptors,\n  freezeMethods,\n  toObjectSet,\n  toCamelCase,\n  noop,\n  toFiniteNumber,\n  findKey,\n  global: _global,\n  isContextDefined,\n  toJSONObject\n};\n","'use strict';\n\nexport default function bind(fn, thisArg) {\n  return function wrap() {\n    return fn.apply(thisArg, arguments);\n  };\n}\n","'use strict';\n\nimport utils from './../utils.js';\nimport buildURL from '../helpers/buildURL.js';\nimport InterceptorManager from './InterceptorManager.js';\nimport dispatchRequest from './dispatchRequest.js';\nimport mergeConfig from './mergeConfig.js';\nimport buildFullPath from './buildFullPath.js';\nimport validator from '../helpers/validator.js';\nimport AxiosHeaders from './AxiosHeaders.js';\n\nconst validators = validator.validators;\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n *\n * @return {Axios} A new instance of Axios\n */\nclass Axios {\n  constructor(instanceConfig) {\n    this.defaults = instanceConfig;\n    this.interceptors = {\n      request: new InterceptorManager(),\n      response: new InterceptorManager()\n    };\n  }\n\n  /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */\n  request(configOrUrl, config) {\n    /*eslint no-param-reassign:0*/\n    // Allow for axios('example/url'[, config]) a la fetch API\n    if (typeof configOrUrl === 'string') {\n      config = config || {};\n      config.url = configOrUrl;\n    } else {\n      config = configOrUrl || {};\n    }\n\n    config = mergeConfig(this.defaults, config);\n\n    const {transitional, paramsSerializer, headers} = config;\n\n    if (transitional !== undefined) {\n      validator.assertOptions(transitional, {\n        silentJSONParsing: validators.transitional(validators.boolean),\n        forcedJSONParsing: validators.transitional(validators.boolean),\n        clarifyTimeoutError: validators.transitional(validators.boolean)\n      }, false);\n    }\n\n    if (paramsSerializer !== undefined) {\n      validator.assertOptions(paramsSerializer, {\n        encode: validators.function,\n        serialize: validators.function\n      }, true);\n    }\n\n    // Set config.method\n    config.method = (config.method || this.defaults.method || 'get').toLowerCase();\n\n    let contextHeaders;\n\n    // Flatten headers\n    contextHeaders = headers && utils.merge(\n      headers.common,\n      headers[config.method]\n    );\n\n    contextHeaders && utils.forEach(\n      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n      (method) => {\n        delete headers[method];\n      }\n    );\n\n    config.headers = AxiosHeaders.concat(contextHeaders, headers);\n\n    // filter out skipped interceptors\n    const requestInterceptorChain = [];\n    let synchronousRequestInterceptors = true;\n    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n        return;\n      }\n\n      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    const responseInterceptorChain = [];\n    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    let promise;\n    let i = 0;\n    let len;\n\n    if (!synchronousRequestInterceptors) {\n      const chain = [dispatchRequest.bind(this), undefined];\n      chain.unshift.apply(chain, requestInterceptorChain);\n      chain.push.apply(chain, responseInterceptorChain);\n      len = chain.length;\n\n      promise = Promise.resolve(config);\n\n      while (i < len) {\n        promise = promise.then(chain[i++], chain[i++]);\n      }\n\n      return promise;\n    }\n\n    len = requestInterceptorChain.length;\n\n    let newConfig = config;\n\n    i = 0;\n\n    while (i < len) {\n      const onFulfilled = requestInterceptorChain[i++];\n      const onRejected = requestInterceptorChain[i++];\n      try {\n        newConfig = onFulfilled(newConfig);\n      } catch (error) {\n        onRejected.call(this, error);\n        break;\n      }\n    }\n\n    try {\n      promise = dispatchRequest.call(this, newConfig);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    i = 0;\n    len = responseInterceptorChain.length;\n\n    while (i < len) {\n      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n    }\n\n    return promise;\n  }\n\n  getUri(config) {\n    config = mergeConfig(this.defaults, config);\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    return buildURL(fullPath, config.params, config.paramsSerializer);\n  }\n}\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method,\n      url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method,\n        headers: isForm ? {\n          'Content-Type': 'multipart/form-data'\n        } : {},\n        url,\n        data\n      }));\n    };\n  }\n\n  Axios.prototype[method] = generateHTTPMethod();\n\n  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);\n});\n\nexport default Axios;\n","'use strict';\n\nimport utils from '../utils.js';\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [config] The config.\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n *\n * @returns {Error} The created error.\n */\nfunction AxiosError(message, code, config, request, response) {\n  Error.call(this);\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    this.stack = (new Error()).stack;\n  }\n\n  this.message = message;\n  this.name = 'AxiosError';\n  code && (this.code = code);\n  config && (this.config = config);\n  request && (this.request = request);\n  response && (this.response = response);\n}\n\nutils.inherits(AxiosError, Error, {\n  toJSON: function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: utils.toJSONObject(this.config),\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  }\n});\n\nconst prototype = AxiosError.prototype;\nconst descriptors = {};\n\n[\n  'ERR_BAD_OPTION_VALUE',\n  'ERR_BAD_OPTION',\n  'ECONNABORTED',\n  'ETIMEDOUT',\n  'ERR_NETWORK',\n  'ERR_FR_TOO_MANY_REDIRECTS',\n  'ERR_DEPRECATED',\n  'ERR_BAD_RESPONSE',\n  'ERR_BAD_REQUEST',\n  'ERR_CANCELED',\n  'ERR_NOT_SUPPORT',\n  'ERR_INVALID_URL'\n// eslint-disable-next-line func-names\n].forEach(code => {\n  descriptors[code] = {value: code};\n});\n\nObject.defineProperties(AxiosError, descriptors);\nObject.defineProperty(prototype, 'isAxiosError', {value: true});\n\n// eslint-disable-next-line func-names\nAxiosError.from = (error, code, config, request, response, customProps) => {\n  const axiosError = Object.create(prototype);\n\n  utils.toFlatObject(error, axiosError, function filter(obj) {\n    return obj !== Error.prototype;\n  }, prop => {\n    return prop !== 'isAxiosError';\n  });\n\n  AxiosError.call(axiosError, error.message, code, config, request, response);\n\n  axiosError.cause = error;\n\n  axiosError.name = error.name;\n\n  customProps && Object.assign(axiosError, customProps);\n\n  return axiosError;\n};\n\nexport default AxiosError;\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","import FormData from 'form-data';\nexport default FormData;\n","/* eslint-env browser */\nmodule.exports = typeof self == 'object' ? self.FormData : window.FormData;\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\nimport envFormData from '../env/classes/FormData.js';\n\n/**\n * Determines if the given thing is a array or js object.\n *\n * @param {string} thing - The object or array to be visited.\n *\n * @returns {boolean}\n */\nfunction isVisitable(thing) {\n  return utils.isPlainObject(thing) || utils.isArray(thing);\n}\n\n/**\n * It removes the brackets from the end of a string\n *\n * @param {string} key - The key of the parameter.\n *\n * @returns {string} the key without the brackets.\n */\nfunction removeBrackets(key) {\n  return utils.endsWith(key, '[]') ? key.slice(0, -2) : key;\n}\n\n/**\n * It takes a path, a key, and a boolean, and returns a string\n *\n * @param {string} path - The path to the current key.\n * @param {string} key - The key of the current object being iterated over.\n * @param {string} dots - If true, the key will be rendered with dots instead of brackets.\n *\n * @returns {string} The path to the current key.\n */\nfunction renderKey(path, key, dots) {\n  if (!path) return key;\n  return path.concat(key).map(function each(token, i) {\n    // eslint-disable-next-line no-param-reassign\n    token = removeBrackets(token);\n    return !dots && i ? '[' + token + ']' : token;\n  }).join(dots ? '.' : '');\n}\n\n/**\n * If the array is an array and none of its elements are visitable, then it's a flat array.\n *\n * @param {Array<any>} arr - The array to check\n *\n * @returns {boolean}\n */\nfunction isFlatArray(arr) {\n  return utils.isArray(arr) && !arr.some(isVisitable);\n}\n\nconst predicates = utils.toFlatObject(utils, {}, null, function filter(prop) {\n  return /^is[A-Z]/.test(prop);\n});\n\n/**\n * If the thing is a FormData object, return true, otherwise return false.\n *\n * @param {unknown} thing - The thing to check.\n *\n * @returns {boolean}\n */\nfunction isSpecCompliant(thing) {\n  return thing && utils.isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator];\n}\n\n/**\n * Convert a data object to FormData\n *\n * @param {Object} obj\n * @param {?Object} [formData]\n * @param {?Object} [options]\n * @param {Function} [options.visitor]\n * @param {Boolean} [options.metaTokens = true]\n * @param {Boolean} [options.dots = false]\n * @param {?Boolean} [options.indexes = false]\n *\n * @returns {Object}\n **/\n\n/**\n * It converts an object into a FormData object\n *\n * @param {Object<any, any>} obj - The object to convert to form data.\n * @param {string} formData - The FormData object to append to.\n * @param {Object<string, any>} options\n *\n * @returns\n */\nfunction toFormData(obj, formData, options) {\n  if (!utils.isObject(obj)) {\n    throw new TypeError('target must be an object');\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  formData = formData || new (envFormData || FormData)();\n\n  // eslint-disable-next-line no-param-reassign\n  options = utils.toFlatObject(options, {\n    metaTokens: true,\n    dots: false,\n    indexes: false\n  }, false, function defined(option, source) {\n    // eslint-disable-next-line no-eq-null,eqeqeq\n    return !utils.isUndefined(source[option]);\n  });\n\n  const metaTokens = options.metaTokens;\n  // eslint-disable-next-line no-use-before-define\n  const visitor = options.visitor || defaultVisitor;\n  const dots = options.dots;\n  const indexes = options.indexes;\n  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;\n  const useBlob = _Blob && isSpecCompliant(formData);\n\n  if (!utils.isFunction(visitor)) {\n    throw new TypeError('visitor must be a function');\n  }\n\n  function convertValue(value) {\n    if (value === null) return '';\n\n    if (utils.isDate(value)) {\n      return value.toISOString();\n    }\n\n    if (!useBlob && utils.isBlob(value)) {\n      throw new AxiosError('Blob is not supported. Use a Buffer instead.');\n    }\n\n    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {\n      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);\n    }\n\n    return value;\n  }\n\n  /**\n   * Default visitor.\n   *\n   * @param {*} value\n   * @param {String|Number} key\n   * @param {Array<String|Number>} path\n   * @this {FormData}\n   *\n   * @returns {boolean} return true to visit the each prop of the value recursively\n   */\n  function defaultVisitor(value, key, path) {\n    let arr = value;\n\n    if (value && !path && typeof value === 'object') {\n      if (utils.endsWith(key, '{}')) {\n        // eslint-disable-next-line no-param-reassign\n        key = metaTokens ? key : key.slice(0, -2);\n        // eslint-disable-next-line no-param-reassign\n        value = JSON.stringify(value);\n      } else if (\n        (utils.isArray(value) && isFlatArray(value)) ||\n        (utils.isFileList(value) || utils.endsWith(key, '[]') && (arr = utils.toArray(value))\n        )) {\n        // eslint-disable-next-line no-param-reassign\n        key = removeBrackets(key);\n\n        arr.forEach(function each(el, index) {\n          !(utils.isUndefined(el) || el === null) && formData.append(\n            // eslint-disable-next-line no-nested-ternary\n            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),\n            convertValue(el)\n          );\n        });\n        return false;\n      }\n    }\n\n    if (isVisitable(value)) {\n      return true;\n    }\n\n    formData.append(renderKey(path, key, dots), convertValue(value));\n\n    return false;\n  }\n\n  const stack = [];\n\n  const exposedHelpers = Object.assign(predicates, {\n    defaultVisitor,\n    convertValue,\n    isVisitable\n  });\n\n  function build(value, path) {\n    if (utils.isUndefined(value)) return;\n\n    if (stack.indexOf(value) !== -1) {\n      throw Error('Circular reference detected in ' + path.join('.'));\n    }\n\n    stack.push(value);\n\n    utils.forEach(value, function each(el, key) {\n      const result = !(utils.isUndefined(el) || el === null) && visitor.call(\n        formData, el, utils.isString(key) ? key.trim() : key, path, exposedHelpers\n      );\n\n      if (result === true) {\n        build(el, path ? path.concat(key) : [key]);\n      }\n    });\n\n    stack.pop();\n  }\n\n  if (!utils.isObject(obj)) {\n    throw new TypeError('data must be an object');\n  }\n\n  build(obj);\n\n  return formData;\n}\n\nexport default toFormData;\n","'use strict';\n\nimport toFormData from './toFormData.js';\n\n/**\n * It encodes a string by replacing all characters that are not in the unreserved set with\n * their percent-encoded equivalents\n *\n * @param {string} str - The string to encode.\n *\n * @returns {string} The encoded string.\n */\nfunction encode(str) {\n  const charMap = {\n    '!': '%21',\n    \"'\": '%27',\n    '(': '%28',\n    ')': '%29',\n    '~': '%7E',\n    '%20': '+',\n    '%00': '\\x00'\n  };\n  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {\n    return charMap[match];\n  });\n}\n\n/**\n * It takes a params object and converts it to a FormData object\n *\n * @param {Object<string, any>} params - The parameters to be converted to a FormData object.\n * @param {Object<string, any>} options - The options object passed to the Axios constructor.\n *\n * @returns {void}\n */\nfunction AxiosURLSearchParams(params, options) {\n  this._pairs = [];\n\n  params && toFormData(params, this, options);\n}\n\nconst prototype = AxiosURLSearchParams.prototype;\n\nprototype.append = function append(name, value) {\n  this._pairs.push([name, value]);\n};\n\nprototype.toString = function toString(encoder) {\n  const _encode = encoder ? function(value) {\n    return encoder.call(this, value, encode);\n  } : encode;\n\n  return this._pairs.map(function each(pair) {\n    return _encode(pair[0]) + '=' + _encode(pair[1]);\n  }, '').join('&');\n};\n\nexport default AxiosURLSearchParams;\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosURLSearchParams from '../helpers/AxiosURLSearchParams.js';\n\n/**\n * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their\n * URI encoded counterparts\n *\n * @param {string} val The value to be encoded.\n *\n * @returns {string} The encoded value.\n */\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @param {?object} options\n *\n * @returns {string} The formatted url\n */\nexport default function buildURL(url, params, options) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n  \n  const _encode = options && options.encode || encode;\n\n  const serializeFn = options && options.serialize;\n\n  let serializedParams;\n\n  if (serializeFn) {\n    serializedParams = serializeFn(params, options);\n  } else {\n    serializedParams = utils.isURLSearchParams(params) ?\n      params.toString() :\n      new AxiosURLSearchParams(params, options).toString(_encode);\n  }\n\n  if (serializedParams) {\n    const hashmarkIndex = url.indexOf(\"#\");\n\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n}\n","'use strict';\n\nimport utils from './../utils.js';\n\nclass InterceptorManager {\n  constructor() {\n    this.handlers = [];\n  }\n\n  /**\n   * Add a new interceptor to the stack\n   *\n   * @param {Function} fulfilled The function to handle `then` for a `Promise`\n   * @param {Function} rejected The function to handle `reject` for a `Promise`\n   *\n   * @return {Number} An ID used to remove interceptor later\n   */\n  use(fulfilled, rejected, options) {\n    this.handlers.push({\n      fulfilled,\n      rejected,\n      synchronous: options ? options.synchronous : false,\n      runWhen: options ? options.runWhen : null\n    });\n    return this.handlers.length - 1;\n  }\n\n  /**\n   * Remove an interceptor from the stack\n   *\n   * @param {Number} id The ID that was returned by `use`\n   *\n   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise\n   */\n  eject(id) {\n    if (this.handlers[id]) {\n      this.handlers[id] = null;\n    }\n  }\n\n  /**\n   * Clear all interceptors from the stack\n   *\n   * @returns {void}\n   */\n  clear() {\n    if (this.handlers) {\n      this.handlers = [];\n    }\n  }\n\n  /**\n   * Iterate over all the registered interceptors\n   *\n   * This method is particularly useful for skipping over any\n   * interceptors that may have become `null` calling `eject`.\n   *\n   * @param {Function} fn The function to call for each interceptor\n   *\n   * @returns {void}\n   */\n  forEach(fn) {\n    utils.forEach(this.handlers, function forEachHandler(h) {\n      if (h !== null) {\n        fn(h);\n      }\n    });\n  }\n}\n\nexport default InterceptorManager;\n","import URLSearchParams from './classes/URLSearchParams.js'\nimport FormData from './classes/FormData.js'\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n *\n * @returns {boolean}\n */\nconst isStandardBrowserEnv = (() => {\n  let product;\n  if (typeof navigator !== 'undefined' && (\n    (product = navigator.product) === 'ReactNative' ||\n    product === 'NativeScript' ||\n    product === 'NS')\n  ) {\n    return false;\n  }\n\n  return typeof window !== 'undefined' && typeof document !== 'undefined';\n})();\n\nexport default {\n  isBrowser: true,\n  classes: {\n    URLSearchParams,\n    FormData,\n    Blob\n  },\n  isStandardBrowserEnv,\n  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']\n};\n","'use strict';\n\nexport default {\n  silentJSONParsing: true,\n  forcedJSONParsing: true,\n  clarifyTimeoutError: false\n};\n","'use strict';\n\nimport AxiosURLSearchParams from '../../../helpers/AxiosURLSearchParams.js';\nexport default typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;\n","'use strict';\n\nexport default FormData;\n","'use strict';\n\nimport utils from '../utils.js';\nimport toFormData from './toFormData.js';\nimport platform from '../platform/index.js';\n\nexport default function toURLEncodedForm(data, options) {\n  return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({\n    visitor: function(value, key, path, helpers) {\n      if (platform.isNode && utils.isBuffer(value)) {\n        this.append(key, value.toString('base64'));\n        return false;\n      }\n\n      return helpers.defaultVisitor.apply(this, arguments);\n    }\n  }, options));\n}\n","'use strict';\n\nimport utils from '../utils.js';\n\n/**\n * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']\n *\n * @param {string} name - The name of the property to get.\n *\n * @returns An array of strings.\n */\nfunction parsePropPath(name) {\n  // foo[x][y][z]\n  // foo.x.y.z\n  // foo-x-y-z\n  // foo x y z\n  return utils.matchAll(/\\w+|\\[(\\w*)]/g, name).map(match => {\n    return match[0] === '[]' ? '' : match[1] || match[0];\n  });\n}\n\n/**\n * Convert an array to an object.\n *\n * @param {Array<any>} arr - The array to convert to an object.\n *\n * @returns An object with the same keys and values as the array.\n */\nfunction arrayToObject(arr) {\n  const obj = {};\n  const keys = Object.keys(arr);\n  let i;\n  const len = keys.length;\n  let key;\n  for (i = 0; i < len; i++) {\n    key = keys[i];\n    obj[key] = arr[key];\n  }\n  return obj;\n}\n\n/**\n * It takes a FormData object and returns a JavaScript object\n *\n * @param {string} formData The FormData object to convert to JSON.\n *\n * @returns {Object<string, any> | null} The converted object.\n */\nfunction formDataToJSON(formData) {\n  function buildPath(path, value, target, index) {\n    let name = path[index++];\n    const isNumericKey = Number.isFinite(+name);\n    const isLast = index >= path.length;\n    name = !name && utils.isArray(target) ? target.length : name;\n\n    if (isLast) {\n      if (utils.hasOwnProp(target, name)) {\n        target[name] = [target[name], value];\n      } else {\n        target[name] = value;\n      }\n\n      return !isNumericKey;\n    }\n\n    if (!target[name] || !utils.isObject(target[name])) {\n      target[name] = [];\n    }\n\n    const result = buildPath(path, value, target[name], index);\n\n    if (result && utils.isArray(target[name])) {\n      target[name] = arrayToObject(target[name]);\n    }\n\n    return !isNumericKey;\n  }\n\n  if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {\n    const obj = {};\n\n    utils.forEachEntry(formData, (name, value) => {\n      buildPath(parsePropPath(name), value, obj, 0);\n    });\n\n    return obj;\n  }\n\n  return null;\n}\n\nexport default formDataToJSON;\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\nimport transitionalDefaults from './transitional.js';\nimport toFormData from '../helpers/toFormData.js';\nimport toURLEncodedForm from '../helpers/toURLEncodedForm.js';\nimport platform from '../platform/index.js';\nimport formDataToJSON from '../helpers/formDataToJSON.js';\n\nconst DEFAULT_CONTENT_TYPE = {\n  'Content-Type': undefined\n};\n\n/**\n * It takes a string, tries to parse it, and if it fails, it returns the stringified version\n * of the input\n *\n * @param {any} rawValue - The value to be stringified.\n * @param {Function} parser - A function that parses a string into a JavaScript object.\n * @param {Function} encoder - A function that takes a value and returns a string.\n *\n * @returns {string} A stringified version of the rawValue.\n */\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nconst defaults = {\n\n  transitional: transitionalDefaults,\n\n  adapter: ['xhr', 'http'],\n\n  transformRequest: [function transformRequest(data, headers) {\n    const contentType = headers.getContentType() || '';\n    const hasJSONContentType = contentType.indexOf('application/json') > -1;\n    const isObjectPayload = utils.isObject(data);\n\n    if (isObjectPayload && utils.isHTMLForm(data)) {\n      data = new FormData(data);\n    }\n\n    const isFormData = utils.isFormData(data);\n\n    if (isFormData) {\n      if (!hasJSONContentType) {\n        return data;\n      }\n      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;\n    }\n\n    if (utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);\n      return data.toString();\n    }\n\n    let isFileList;\n\n    if (isObjectPayload) {\n      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {\n        return toURLEncodedForm(data, this.formSerializer).toString();\n      }\n\n      if ((isFileList = utils.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {\n        const _FormData = this.env && this.env.FormData;\n\n        return toFormData(\n          isFileList ? {'files[]': data} : data,\n          _FormData && new _FormData(),\n          this.formSerializer\n        );\n      }\n    }\n\n    if (isObjectPayload || hasJSONContentType ) {\n      headers.setContentType('application/json', false);\n      return stringifySafely(data);\n    }\n\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    const transitional = this.transitional || defaults.transitional;\n    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    const JSONRequested = this.responseType === 'json';\n\n    if (data && utils.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {\n      const silentJSONParsing = transitional && transitional.silentJSONParsing;\n      const strictJSONParsing = !silentJSONParsing && JSONRequested;\n\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  env: {\n    FormData: platform.classes.FormData,\n    Blob: platform.classes.Blob\n  },\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*'\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nexport default defaults;\n","'use strict';\n\nimport utils from '../utils.js';\nimport parseHeaders from '../helpers/parseHeaders.js';\n\nconst $internals = Symbol('internals');\n\nfunction normalizeHeader(header) {\n  return header && String(header).trim().toLowerCase();\n}\n\nfunction normalizeValue(value) {\n  if (value === false || value == null) {\n    return value;\n  }\n\n  return utils.isArray(value) ? value.map(normalizeValue) : String(value);\n}\n\nfunction parseTokens(str) {\n  const tokens = Object.create(null);\n  const tokensRE = /([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;\n  let match;\n\n  while ((match = tokensRE.exec(str))) {\n    tokens[match[1]] = match[2];\n  }\n\n  return tokens;\n}\n\nfunction isValidHeaderName(str) {\n  return /^[-_a-zA-Z]+$/.test(str.trim());\n}\n\nfunction matchHeaderValue(context, value, header, filter) {\n  if (utils.isFunction(filter)) {\n    return filter.call(this, value, header);\n  }\n\n  if (!utils.isString(value)) return;\n\n  if (utils.isString(filter)) {\n    return value.indexOf(filter) !== -1;\n  }\n\n  if (utils.isRegExp(filter)) {\n    return filter.test(value);\n  }\n}\n\nfunction formatHeader(header) {\n  return header.trim()\n    .toLowerCase().replace(/([a-z\\d])(\\w*)/g, (w, char, str) => {\n      return char.toUpperCase() + str;\n    });\n}\n\nfunction buildAccessors(obj, header) {\n  const accessorName = utils.toCamelCase(' ' + header);\n\n  ['get', 'set', 'has'].forEach(methodName => {\n    Object.defineProperty(obj, methodName + accessorName, {\n      value: function(arg1, arg2, arg3) {\n        return this[methodName].call(this, header, arg1, arg2, arg3);\n      },\n      configurable: true\n    });\n  });\n}\n\nclass AxiosHeaders {\n  constructor(headers) {\n    headers && this.set(headers);\n  }\n\n  set(header, valueOrRewrite, rewrite) {\n    const self = this;\n\n    function setHeader(_value, _header, _rewrite) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!lHeader) {\n        throw new Error('header name must be a non-empty string');\n      }\n\n      const key = utils.findKey(self, lHeader);\n\n      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {\n        self[key || _header] = normalizeValue(_value);\n      }\n    }\n\n    const setHeaders = (headers, _rewrite) =>\n      utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));\n\n    if (utils.isPlainObject(header) || header instanceof this.constructor) {\n      setHeaders(header, valueOrRewrite)\n    } else if(utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {\n      setHeaders(parseHeaders(header), valueOrRewrite);\n    } else {\n      header != null && setHeader(valueOrRewrite, header, rewrite);\n    }\n\n    return this;\n  }\n\n  get(header, parser) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      if (key) {\n        const value = this[key];\n\n        if (!parser) {\n          return value;\n        }\n\n        if (parser === true) {\n          return parseTokens(value);\n        }\n\n        if (utils.isFunction(parser)) {\n          return parser.call(this, value, key);\n        }\n\n        if (utils.isRegExp(parser)) {\n          return parser.exec(value);\n        }\n\n        throw new TypeError('parser must be boolean|regexp|function');\n      }\n    }\n  }\n\n  has(header, matcher) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      return !!(key && (!matcher || matchHeaderValue(this, this[key], key, matcher)));\n    }\n\n    return false;\n  }\n\n  delete(header, matcher) {\n    const self = this;\n    let deleted = false;\n\n    function deleteHeader(_header) {\n      _header = normalizeHeader(_header);\n\n      if (_header) {\n        const key = utils.findKey(self, _header);\n\n        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {\n          delete self[key];\n\n          deleted = true;\n        }\n      }\n    }\n\n    if (utils.isArray(header)) {\n      header.forEach(deleteHeader);\n    } else {\n      deleteHeader(header);\n    }\n\n    return deleted;\n  }\n\n  clear() {\n    return Object.keys(this).forEach(this.delete.bind(this));\n  }\n\n  normalize(format) {\n    const self = this;\n    const headers = {};\n\n    utils.forEach(this, (value, header) => {\n      const key = utils.findKey(headers, header);\n\n      if (key) {\n        self[key] = normalizeValue(value);\n        delete self[header];\n        return;\n      }\n\n      const normalized = format ? formatHeader(header) : String(header).trim();\n\n      if (normalized !== header) {\n        delete self[header];\n      }\n\n      self[normalized] = normalizeValue(value);\n\n      headers[normalized] = true;\n    });\n\n    return this;\n  }\n\n  concat(...targets) {\n    return this.constructor.concat(this, ...targets);\n  }\n\n  toJSON(asStrings) {\n    const obj = Object.create(null);\n\n    utils.forEach(this, (value, header) => {\n      value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(', ') : value);\n    });\n\n    return obj;\n  }\n\n  [Symbol.iterator]() {\n    return Object.entries(this.toJSON())[Symbol.iterator]();\n  }\n\n  toString() {\n    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\\n');\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'AxiosHeaders';\n  }\n\n  static from(thing) {\n    return thing instanceof this ? thing : new this(thing);\n  }\n\n  static concat(first, ...targets) {\n    const computed = new this(first);\n\n    targets.forEach((target) => computed.set(target));\n\n    return computed;\n  }\n\n  static accessor(header) {\n    const internals = this[$internals] = (this[$internals] = {\n      accessors: {}\n    });\n\n    const accessors = internals.accessors;\n    const prototype = this.prototype;\n\n    function defineAccessor(_header) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!accessors[lHeader]) {\n        buildAccessors(prototype, _header);\n        accessors[lHeader] = true;\n      }\n    }\n\n    utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);\n\n    return this;\n  }\n}\n\nAxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent']);\n\nutils.freezeMethods(AxiosHeaders.prototype);\nutils.freezeMethods(AxiosHeaders);\n\nexport default AxiosHeaders;\n","'use strict';\n\nimport utils from './../utils.js';\n\n// RawAxiosHeaders whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nconst ignoreDuplicateOf = utils.toObjectSet([\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n]);\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} rawHeaders Headers needing to be parsed\n *\n * @returns {Object} Headers parsed into an object\n */\nexport default rawHeaders => {\n  const parsed = {};\n  let key;\n  let val;\n  let i;\n\n  rawHeaders && rawHeaders.split('\\n').forEach(function parser(line) {\n    i = line.indexOf(':');\n    key = line.substring(0, i).trim().toLowerCase();\n    val = line.substring(i + 1).trim();\n\n    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {\n      return;\n    }\n\n    if (key === 'set-cookie') {\n      if (parsed[key]) {\n        parsed[key].push(val);\n      } else {\n        parsed[key] = [val];\n      }\n    } else {\n      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n    }\n  });\n\n  return parsed;\n};\n","'use strict';\n\nimport utils from './../utils.js';\nimport defaults from '../defaults/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Array|Function} fns A single function or Array of functions\n * @param {?Object} response The response object\n *\n * @returns {*} The resulting transformed data\n */\nexport default function transformData(fns, response) {\n  const config = this || defaults;\n  const context = response || config;\n  const headers = AxiosHeaders.from(context.headers);\n  let data = context.data;\n\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);\n  });\n\n  headers.normalize();\n\n  return data;\n}\n","'use strict';\n\nexport default function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n}\n","'use strict';\n\nimport AxiosError from '../core/AxiosError.js';\nimport utils from '../utils.js';\n\n/**\n * A `CanceledError` is an object that is thrown when an operation is canceled.\n *\n * @param {string=} message The message.\n * @param {Object=} config The config.\n * @param {Object=} request The request.\n *\n * @returns {CanceledError} The created error.\n */\nfunction CanceledError(message, config, request) {\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED, config, request);\n  this.name = 'CanceledError';\n}\n\nutils.inherits(CanceledError, AxiosError, {\n  __CANCEL__: true\n});\n\nexport default CanceledError;\n","'use strict';\n\nimport AxiosError from './AxiosError.js';\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n *\n * @returns {object} The response.\n */\nexport default function settle(resolve, reject, response) {\n  const validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(new AxiosError(\n      'Request failed with status code ' + response.status,\n      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],\n      response.config,\n      response.request,\n      response\n    ));\n  }\n}\n","'use strict';\n\nimport utils from './../utils.js';\nimport platform from '../platform/index.js';\n\nexport default platform.isStandardBrowserEnv ?\n\n// Standard browser envs support document.cookie\n  (function standardBrowserEnv() {\n    return {\n      write: function write(name, value, expires, path, domain, secure) {\n        const cookie = [];\n        cookie.push(name + '=' + encodeURIComponent(value));\n\n        if (utils.isNumber(expires)) {\n          cookie.push('expires=' + new Date(expires).toGMTString());\n        }\n\n        if (utils.isString(path)) {\n          cookie.push('path=' + path);\n        }\n\n        if (utils.isString(domain)) {\n          cookie.push('domain=' + domain);\n        }\n\n        if (secure === true) {\n          cookie.push('secure');\n        }\n\n        document.cookie = cookie.join('; ');\n      },\n\n      read: function read(name) {\n        const match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n        return (match ? decodeURIComponent(match[3]) : null);\n      },\n\n      remove: function remove(name) {\n        this.write(name, '', Date.now() - 86400000);\n      }\n    };\n  })() :\n\n// Non standard browser env (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return {\n      write: function write() {},\n      read: function read() { return null; },\n      remove: function remove() {}\n    };\n  })();\n","'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n *\n * @returns {string} The combined URL\n */\nexport default function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n}\n","'use strict';\n\nimport isAbsoluteURL from '../helpers/isAbsoluteURL.js';\nimport combineURLs from '../helpers/combineURLs.js';\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n *\n * @returns {string} The combined full path\n */\nexport default function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n}\n","'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n *\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nexport default function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n}\n","'use strict';\n\nimport utils from './../utils.js';\nimport platform from '../platform/index.js';\n\nexport default platform.isStandardBrowserEnv ?\n\n// Standard browser envs have full support of the APIs needed to test\n// whether the request URL is of the same origin as current location.\n  (function standardBrowserEnv() {\n    const msie = /(msie|trident)/i.test(navigator.userAgent);\n    const urlParsingNode = document.createElement('a');\n    let originURL;\n\n    /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n    function resolveURL(url) {\n      let href = url;\n\n      if (msie) {\n        // IE needs attribute set twice to normalize properties\n        urlParsingNode.setAttribute('href', href);\n        href = urlParsingNode.href;\n      }\n\n      urlParsingNode.setAttribute('href', href);\n\n      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n      return {\n        href: urlParsingNode.href,\n        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n        host: urlParsingNode.host,\n        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n        hostname: urlParsingNode.hostname,\n        port: urlParsingNode.port,\n        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n          urlParsingNode.pathname :\n          '/' + urlParsingNode.pathname\n      };\n    }\n\n    originURL = resolveURL(window.location.href);\n\n    /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n    return function isURLSameOrigin(requestURL) {\n      const parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n      return (parsed.protocol === originURL.protocol &&\n          parsed.host === originURL.host);\n    };\n  })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return function isURLSameOrigin() {\n      return true;\n    };\n  })();\n","'use strict';\n\n/**\n * Calculate data maxRate\n * @param {Number} [samplesCount= 10]\n * @param {Number} [min= 1000]\n * @returns {Function}\n */\nfunction speedometer(samplesCount, min) {\n  samplesCount = samplesCount || 10;\n  const bytes = new Array(samplesCount);\n  const timestamps = new Array(samplesCount);\n  let head = 0;\n  let tail = 0;\n  let firstSampleTS;\n\n  min = min !== undefined ? min : 1000;\n\n  return function push(chunkLength) {\n    const now = Date.now();\n\n    const startedAt = timestamps[tail];\n\n    if (!firstSampleTS) {\n      firstSampleTS = now;\n    }\n\n    bytes[head] = chunkLength;\n    timestamps[head] = now;\n\n    let i = tail;\n    let bytesCount = 0;\n\n    while (i !== head) {\n      bytesCount += bytes[i++];\n      i = i % samplesCount;\n    }\n\n    head = (head + 1) % samplesCount;\n\n    if (head === tail) {\n      tail = (tail + 1) % samplesCount;\n    }\n\n    if (now - firstSampleTS < min) {\n      return;\n    }\n\n    const passed = startedAt && now - startedAt;\n\n    return  passed ? Math.round(bytesCount * 1000 / passed) : undefined;\n  };\n}\n\nexport default speedometer;\n","'use strict';\n\nimport utils from './../utils.js';\nimport settle from './../core/settle.js';\nimport cookies from './../helpers/cookies.js';\nimport buildURL from './../helpers/buildURL.js';\nimport buildFullPath from '../core/buildFullPath.js';\nimport isURLSameOrigin from './../helpers/isURLSameOrigin.js';\nimport transitionalDefaults from '../defaults/transitional.js';\nimport AxiosError from '../core/AxiosError.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport parseProtocol from '../helpers/parseProtocol.js';\nimport platform from '../platform/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport speedometer from '../helpers/speedometer.js';\n\nfunction progressEventReducer(listener, isDownloadStream) {\n  let bytesNotified = 0;\n  const _speedometer = speedometer(50, 250);\n\n  return e => {\n    const loaded = e.loaded;\n    const total = e.lengthComputable ? e.total : undefined;\n    const progressBytes = loaded - bytesNotified;\n    const rate = _speedometer(progressBytes);\n    const inRange = loaded <= total;\n\n    bytesNotified = loaded;\n\n    const data = {\n      loaded,\n      total,\n      progress: total ? (loaded / total) : undefined,\n      bytes: progressBytes,\n      rate: rate ? rate : undefined,\n      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,\n      event: e\n    };\n\n    data[isDownloadStream ? 'download' : 'upload'] = true;\n\n    listener(data);\n  };\n}\n\nconst isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';\n\nexport default isXHRAdapterSupported && function (config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    let requestData = config.data;\n    const requestHeaders = AxiosHeaders.from(config.headers).normalize();\n    const responseType = config.responseType;\n    let onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n\n    if (utils.isFormData(requestData) && platform.isStandardBrowserEnv) {\n      requestHeaders.setContentType(false); // Let the browser set it\n    }\n\n    let request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      const username = config.auth.username || '';\n      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.set('Authorization', 'Basic ' + btoa(username + ':' + password));\n    }\n\n    const fullPath = buildFullPath(config.baseURL, config.url);\n\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      const responseHeaders = AxiosHeaders.from(\n        'getAllResponseHeaders' in request && request.getAllResponseHeaders()\n      );\n      const responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?\n        request.responseText : request.response;\n      const response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config,\n        request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n      const transitional = config.transitional || transitionalDefaults;\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(new AxiosError(\n        timeoutErrorMessage,\n        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,\n        config,\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (platform.isStandardBrowserEnv) {\n      // Add xsrf header\n      const xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath))\n        && config.xsrfCookieName && cookies.read(config.xsrfCookieName);\n\n      if (xsrfValue) {\n        requestHeaders.set(config.xsrfHeaderName, xsrfValue);\n      }\n    }\n\n    // Remove Content-Type if data is undefined\n    requestData === undefined && requestHeaders.setContentType(null);\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {\n        request.setRequestHeader(key, val);\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', progressEventReducer(config.onDownloadProgress, true));\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', progressEventReducer(config.onUploadProgress));\n    }\n\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = cancel => {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);\n        request.abort();\n        request = null;\n      };\n\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    const protocol = parseProtocol(fullPath);\n\n    if (protocol && platform.protocols.indexOf(protocol) === -1) {\n      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));\n      return;\n    }\n\n\n    // Send the request\n    request.send(requestData || null);\n  });\n}\n","'use strict';\n\nexport default function parseProtocol(url) {\n  const match = /^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(url);\n  return match && match[1] || '';\n}\n","import utils from '../utils.js';\nimport httpAdapter from './http.js';\nimport xhrAdapter from './xhr.js';\nimport AxiosError from \"../core/AxiosError.js\";\n\nconst knownAdapters = {\n  http: httpAdapter,\n  xhr: xhrAdapter\n}\n\nutils.forEach(knownAdapters, (fn, value) => {\n  if(fn) {\n    try {\n      Object.defineProperty(fn, 'name', {value});\n    } catch (e) {\n      // eslint-disable-next-line no-empty\n    }\n    Object.defineProperty(fn, 'adapterName', {value});\n  }\n});\n\nexport default {\n  getAdapter: (adapters) => {\n    adapters = utils.isArray(adapters) ? adapters : [adapters];\n\n    const {length} = adapters;\n    let nameOrAdapter;\n    let adapter;\n\n    for (let i = 0; i < length; i++) {\n      nameOrAdapter = adapters[i];\n      if((adapter = utils.isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter)) {\n        break;\n      }\n    }\n\n    if (!adapter) {\n      if (adapter === false) {\n        throw new AxiosError(\n          `Adapter ${nameOrAdapter} is not supported by the environment`,\n          'ERR_NOT_SUPPORT'\n        );\n      }\n\n      throw new Error(\n        utils.hasOwnProp(knownAdapters, nameOrAdapter) ?\n          `Adapter '${nameOrAdapter}' is not available in the build` :\n          `Unknown adapter '${nameOrAdapter}'`\n      );\n    }\n\n    if (!utils.isFunction(adapter)) {\n      throw new TypeError('adapter is not a function');\n    }\n\n    return adapter;\n  },\n  adapters: knownAdapters\n}\n","// eslint-disable-next-line strict\nexport default null;\n","'use strict';\n\nimport transformData from './transformData.js';\nimport isCancel from '../cancel/isCancel.js';\nimport defaults from '../defaults/index.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport adapters from \"../adapters/adapters.js\";\n\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n *\n * @param {Object} config The config that is to be used for the request\n *\n * @returns {void}\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new CanceledError();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n *\n * @returns {Promise} The Promise to be fulfilled\n */\nexport default function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  config.headers = AxiosHeaders.from(config.headers);\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.transformRequest\n  );\n\n  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {\n    config.headers.setContentType('application/x-www-form-urlencoded', false);\n  }\n\n  const adapter = adapters.getAdapter(config.adapter || defaults.adapter);\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      config.transformResponse,\n      response\n    );\n\n    response.headers = AxiosHeaders.from(response.headers);\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          config.transformResponse,\n          reason.response\n        );\n        reason.response.headers = AxiosHeaders.from(reason.response.headers);\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n}\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosHeaders from \"./AxiosHeaders.js\";\n\nconst headersToObject = (thing) => thing instanceof AxiosHeaders ? thing.toJSON() : thing;\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n *\n * @returns {Object} New object resulting from merging config2 to config1\n */\nexport default function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  const config = {};\n\n  function getMergedValue(target, source, caseless) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge.call({caseless}, target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(a, b, caseless) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(a, b, caseless);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a, caseless);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(a, b, prop) {\n    if (prop in config2) {\n      return getMergedValue(a, b);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  const mergeMap = {\n    url: valueFromConfig2,\n    method: valueFromConfig2,\n    data: valueFromConfig2,\n    baseURL: defaultToConfig2,\n    transformRequest: defaultToConfig2,\n    transformResponse: defaultToConfig2,\n    paramsSerializer: defaultToConfig2,\n    timeout: defaultToConfig2,\n    timeoutMessage: defaultToConfig2,\n    withCredentials: defaultToConfig2,\n    adapter: defaultToConfig2,\n    responseType: defaultToConfig2,\n    xsrfCookieName: defaultToConfig2,\n    xsrfHeaderName: defaultToConfig2,\n    onUploadProgress: defaultToConfig2,\n    onDownloadProgress: defaultToConfig2,\n    decompress: defaultToConfig2,\n    maxContentLength: defaultToConfig2,\n    maxBodyLength: defaultToConfig2,\n    beforeRedirect: defaultToConfig2,\n    transport: defaultToConfig2,\n    httpAgent: defaultToConfig2,\n    httpsAgent: defaultToConfig2,\n    cancelToken: defaultToConfig2,\n    socketPath: defaultToConfig2,\n    responseEncoding: defaultToConfig2,\n    validateStatus: mergeDirectKeys,\n    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)\n  };\n\n  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {\n    const merge = mergeMap[prop] || mergeDeepProperties;\n    const configValue = merge(config1[prop], config2[prop], prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n}\n","'use strict';\n\nimport {VERSION} from '../env/data.js';\nimport AxiosError from '../core/AxiosError.js';\n\nconst validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nconst deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n *\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n *\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return (value, opt, opts) => {\n    if (validator === false) {\n      throw new AxiosError(\n        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),\n        AxiosError.ERR_DEPRECATED\n      );\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object's properties type\n *\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n *\n * @returns {object}\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);\n  }\n  const keys = Object.keys(options);\n  let i = keys.length;\n  while (i-- > 0) {\n    const opt = keys[i];\n    const validator = schema[opt];\n    if (validator) {\n      const value = options[opt];\n      const result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);\n    }\n  }\n}\n\nexport default {\n  assertOptions,\n  validators\n};\n","export const VERSION = \"1.2.0\";","'use strict';\n\nimport CanceledError from './CanceledError.js';\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @param {Function} executor The executor function.\n *\n * @returns {CancelToken}\n */\nclass CancelToken {\n  constructor(executor) {\n    if (typeof executor !== 'function') {\n      throw new TypeError('executor must be a function.');\n    }\n\n    let resolvePromise;\n\n    this.promise = new Promise(function promiseExecutor(resolve) {\n      resolvePromise = resolve;\n    });\n\n    const token = this;\n\n    // eslint-disable-next-line func-names\n    this.promise.then(cancel => {\n      if (!token._listeners) return;\n\n      let i = token._listeners.length;\n\n      while (i-- > 0) {\n        token._listeners[i](cancel);\n      }\n      token._listeners = null;\n    });\n\n    // eslint-disable-next-line func-names\n    this.promise.then = onfulfilled => {\n      let _resolve;\n      // eslint-disable-next-line func-names\n      const promise = new Promise(resolve => {\n        token.subscribe(resolve);\n        _resolve = resolve;\n      }).then(onfulfilled);\n\n      promise.cancel = function reject() {\n        token.unsubscribe(_resolve);\n      };\n\n      return promise;\n    };\n\n    executor(function cancel(message, config, request) {\n      if (token.reason) {\n        // Cancellation has already been requested\n        return;\n      }\n\n      token.reason = new CanceledError(message, config, request);\n      resolvePromise(token.reason);\n    });\n  }\n\n  /**\n   * Throws a `CanceledError` if cancellation has been requested.\n   */\n  throwIfRequested() {\n    if (this.reason) {\n      throw this.reason;\n    }\n  }\n\n  /**\n   * Subscribe to the cancel signal\n   */\n\n  subscribe(listener) {\n    if (this.reason) {\n      listener(this.reason);\n      return;\n    }\n\n    if (this._listeners) {\n      this._listeners.push(listener);\n    } else {\n      this._listeners = [listener];\n    }\n  }\n\n  /**\n   * Unsubscribe from the cancel signal\n   */\n\n  unsubscribe(listener) {\n    if (!this._listeners) {\n      return;\n    }\n    const index = this._listeners.indexOf(listener);\n    if (index !== -1) {\n      this._listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Returns an object that contains a new `CancelToken` and a function that, when called,\n   * cancels the `CancelToken`.\n   */\n  static source() {\n    let cancel;\n    const token = new CancelToken(function executor(c) {\n      cancel = c;\n    });\n    return {\n      token,\n      cancel\n    };\n  }\n}\n\nexport default CancelToken;\n","'use strict';\n\nimport utils from './utils.js';\nimport bind from './helpers/bind.js';\nimport Axios from './core/Axios.js';\nimport mergeConfig from './core/mergeConfig.js';\nimport defaults from './defaults/index.js';\nimport formDataToJSON from './helpers/formDataToJSON.js';\nimport CanceledError from './cancel/CanceledError.js';\nimport CancelToken from './cancel/CancelToken.js';\nimport isCancel from './cancel/isCancel.js';\nimport {VERSION} from './env/data.js';\nimport toFormData from './helpers/toFormData.js';\nimport AxiosError from './core/AxiosError.js';\nimport spread from './helpers/spread.js';\nimport isAxiosError from './helpers/isAxiosError.js';\nimport AxiosHeaders from \"./core/AxiosHeaders.js\";\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n *\n * @returns {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  const context = new Axios(defaultConfig);\n  const instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context, {allOwnKeys: true});\n\n  // Copy context to instance\n  utils.extend(instance, context, null, {allOwnKeys: true});\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nconst axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Expose Cancel & CancelToken\naxios.CanceledError = CanceledError;\naxios.CancelToken = CancelToken;\naxios.isCancel = isCancel;\naxios.VERSION = VERSION;\naxios.toFormData = toFormData;\n\n// Expose AxiosError class\naxios.AxiosError = AxiosError;\n\n// alias for CanceledError for backward compatibility\naxios.Cancel = axios.CanceledError;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\n\naxios.spread = spread;\n\n// Expose isAxiosError\naxios.isAxiosError = isAxiosError;\n\naxios.AxiosHeaders = AxiosHeaders;\n\naxios.formToJSON = thing => formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);\n\naxios.default = axios;\n\n// this module should only have a default export\nexport default axios\n","'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n *\n * @returns {Function}\n */\nexport default function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n}\n","'use strict';\n\nimport utils from './../utils.js';\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n *\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nexport default function isAxiosError(payload) {\n  return utils.isObject(payload) && (payload.isAxiosError === true);\n}\n","import axios from './lib/axios.js';\n\n// This module is intended to unwrap Axios default export as named.\n// Keep top-level export same with static properties\n// so that it can keep same with es module or cjs\nconst {\n  Axios,\n  AxiosError,\n  CanceledError,\n  isCancel,\n  CancelToken,\n  VERSION,\n  all,\n  Cancel,\n  isAxiosError,\n  spread,\n  toFormData,\n  AxiosHeaders,\n  formToJSON\n} = axios;\n\nexport {\n  axios as default,\n  Axios,\n  AxiosError,\n  CanceledError,\n  isCancel,\n  CancelToken,\n  VERSION,\n  all,\n  Cancel,\n  isAxiosError,\n  spread,\n  toFormData,\n  AxiosHeaders,\n  formToJSON\n}\n","!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{(\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this).basicLightbox=e()}}((function(){return function e(n,t,o){function r(c,u){if(!t[c]){if(!n[c]){var s=\"function\"==typeof require&&require;if(!u&&s)return s(c,!0);if(i)return i(c,!0);var a=new Error(\"Cannot find module '\"+c+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var l=t[c]={exports:{}};n[c][0].call(l.exports,(function(e){return r(n[c][1][e]||e)}),l,l.exports,e,n,t,o)}return t[c].exports}for(var i=\"function\"==typeof require&&require,c=0;c<o.length;c++)r(o[c]);return r}({1:[function(e,n,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.create=t.visible=void 0;var o=function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],t=document.createElement(\"div\");return t.innerHTML=e.trim(),!0===n?t.children:t.firstChild},r=function(e,n){var t=e.children;return 1===t.length&&t[0].tagName===n},i=function(e){return null!=(e=e||document.querySelector(\".basicLightbox\"))&&!0===e.ownerDocument.body.contains(e)};t.visible=i;t.create=function(e,n){var t=function(e,n){var t=o('\\n\\t\\t<div class=\"basicLightbox '.concat(n.className,'\">\\n\\t\\t\\t<div class=\"basicLightbox__placeholder\" role=\"dialog\"></div>\\n\\t\\t</div>\\n\\t')),i=t.querySelector(\".basicLightbox__placeholder\");e.forEach((function(e){return i.appendChild(e)}));var c=r(i,\"IMG\"),u=r(i,\"VIDEO\"),s=r(i,\"IFRAME\");return!0===c&&t.classList.add(\"basicLightbox--img\"),!0===u&&t.classList.add(\"basicLightbox--video\"),!0===s&&t.classList.add(\"basicLightbox--iframe\"),t}(e=function(e){var n=\"string\"==typeof e,t=e instanceof HTMLElement==1;if(!1===n&&!1===t)throw new Error(\"Content must be a DOM element/node or string\");return!0===n?Array.from(o(e,!0)):\"TEMPLATE\"===e.tagName?[e.content.cloneNode(!0)]:Array.from(e.children)}(e),n=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(null==(e=Object.assign({},e)).closable&&(e.closable=!0),null==e.className&&(e.className=\"\"),null==e.onShow&&(e.onShow=function(){}),null==e.onClose&&(e.onClose=function(){}),\"boolean\"!=typeof e.closable)throw new Error(\"Property `closable` must be a boolean\");if(\"string\"!=typeof e.className)throw new Error(\"Property `className` must be a string\");if(\"function\"!=typeof e.onShow)throw new Error(\"Property `onShow` must be a function\");if(\"function\"!=typeof e.onClose)throw new Error(\"Property `onClose` must be a function\");return e}(n)),c=function(e){return!1!==n.onClose(u)&&function(e,n){return e.classList.remove(\"basicLightbox--visible\"),setTimeout((function(){return!1===i(e)||e.parentElement.removeChild(e),n()}),410),!0}(t,(function(){if(\"function\"==typeof e)return e(u)}))};!0===n.closable&&t.addEventListener(\"click\",(function(e){e.target===t&&c()}));var u={element:function(){return t},visible:function(){return i(t)},show:function(e){return!1!==n.onShow(u)&&function(e,n){return document.body.appendChild(e),setTimeout((function(){requestAnimationFrame((function(){return e.classList.add(\"basicLightbox--visible\"),n()}))}),10),!0}(t,(function(){if(\"function\"==typeof e)return e(u)}))},close:c};return u}},{}]},{},[1])(1)}));","import * as basicLightbox from 'basiclightbox';\nimport RenderApi from '../helpers/renderFuncApi';\nimport FetchFilmsApi from '../helpers/fetchFilmsApi';\nimport { checkFilmTrailer } from '../checkers/filmTrailerChecker';\n\nconst fetchApi = new FetchFilmsApi();\nconst renderApi = new RenderApi();\n\nexport default async function onShowTrailer(e) {\n  const idTrailer = e.currentTarget.dataset.id;\n\n  const showTrailersRequest = await fetchApi.getFilmTrailerById({\n    id: idTrailer,\n  });\n\n  const showTrailers = showTrailersRequest.data.results;\n\n  if (showTrailers.length === 0) {\n    const instance = basicLightbox.create(\n      renderApi.createModalWithoutFilmTrailer()\n    );\n\n    instance.show();\n\n    document.addEventListener('keydown', onPressEsc, { once: true });\n\n    function onPressEsc(e) {\n      if (e.code !== 'Escape') {\n        return;\n      }\n\n      instance.close();\n    }\n\n    return;\n  }\n\n  const trailer = checkFilmTrailer(showTrailers);\n\n  const instance = basicLightbox.create(\n    renderApi.createModalFilmTrailer(trailer.key)\n  );\n\n  instance.show();\n\n  document.addEventListener('keydown', onPressEsc, { once: true });\n\n  function onPressEsc(e) {\n    if (e.code !== 'Escape') {\n      return;\n    }\n\n    instance.close();\n  }\n}\n","export function checkFilmTrailer(trailers) {\n  const findTrailer = trailers.find(video => video.type === 'Trailer');\n\n  return findTrailer === undefined ? trailers[0] : findTrailer;\n}\n","export function checkFilmDetailes({\n  poster_path,\n  title,\n  vote_average,\n  vote_count,\n  popularity,\n  genres,\n  overview,\n}) {\n  const fixedGenres = genres[0].name;\n\n  const roundVote = !Number.isInteger(vote_average)\n    ? vote_average.toFixed(1)\n    : String(vote_average);\n\n  const fixedVote = roundVote.includes('.0')\n    ? roundVote.replace('.0', '')\n    : roundVote;\n\n  const roundPopularity = !Number.isInteger(popularity)\n    ? popularity.toFixed(1)\n    : String(popularity);\n\n  const fixedPopularity = roundPopularity.includes('.0')\n    ? roundPopularity.replace('.0', '')\n    : roundPopularity;\n\n  return {\n    poster_path,\n    title,\n    fixedGenres,\n    vote_count,\n    fixedVote,\n    fixedPopularity,\n    overview,\n  };\n}\n","import {\n  getDatabase,\n  ref,\n  onValue,\n  push,\n  set,\n  remove,\n  child,\n  get,\n} from 'firebase/database';\nimport { app } from '../firebase/initFirebase';\nimport { checkDbCollectionForMatches } from './checkerDbCollectionFilms';\nconst db = getDatabase(app);\nfunction postUserIntoDatebase({ uid: userId, email, displayName }) {\n  set(ref(db, `users/${userId}/userData`), {\n    username: displayName,\n    email,\n  });\n  console.log('add');\n}\nfunction postFilmToDatabase({ id, currentFilmId, reference }) {\n  // set(ref(db, `users/${id}/${reference}`), {\n  //   [currentFilmId]: 'film',\n  // });\n\n  const postListRef = ref(db, `users/${id}/${reference}`);\n\n  const newPostRef = push(postListRef);\n\n  console.log('queue key:' + newPostRef.key);\n  set(newPostRef, {\n    [currentFilmId]: currentFilmId,\n  });\n  // getFilmDataById(id, 'userQueue');\n  // console.log(objData);\n  checkDbCollectionForMatches(id, 'userQueue');\n}\nfunction deleteDataWithDb({ id, currentFilmId, reference }) {\n  remove(`users/${id}/${reference}`);\n}\nfunction getUserDataById(id, refLink) {\n  const resp = ref(db, `users/${id}/${refLink}`);\n  let userData = {};\n\n  onValue(resp, data => {\n    userData = data.val();\n  });\n  console.log('getUserFunc', userData);\n  return userData;\n}\n\nfunction getFilmDataById(userId, reference) {\n  get(child(ref(db), `users/${userId}/${reference}`))\n    .then(snapshot => {\n      if (snapshot.exists()) {\n        const data = snapshot.val();\n        // console.log(Object.values(data));\n        const dataObj = Object.values(data);\n        return dataObj;\n      } else {\n        console.log('No data available');\n      }\n    })\n    .then(value => {\n      console.log(value);\n      // const data = value.flatMap(elem => Object.values(elem));\n\n      // const res = data.filter((el, idx, arr) => !arr.includes(el));\n      // console.log(res);\n      // for (const el of value) {\n      //   const key = Object.keys(el);\n      //   console.log((objData = [...key]));\n      // }\n      // console.log('this', objData);\n    })\n    .catch(error => {\n      console.error(error);\n    });\n}\nexport {\n  postUserIntoDatebase,\n  getUserDataById,\n  postFilmToDatabase,\n  getFilmDataById,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\nimport { QueryContext } from '../view/EventRegistration';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n  if (\n    typeof timeout === 'number' &&\n    // @ts-ignore Is only defined in Deno environments.\n    typeof Deno !== 'undefined' &&\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno['unrefTimer']\n  ) {\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno.unrefTimer(timeout);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } else if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n          this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n        onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange =\n            function () {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const rstate = (newScript as any).readyState;\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = (newScript as any).onreadystatechange = null;\n                if (newScript.parentNode) {\n                  newScript.parentNode.removeChild(newScript);\n                }\n                loadCB();\n              }\n            };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APPLICATION_ID_PARAM,\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken,\n      applicationId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string,\n    applicationId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n    if (applicationId) {\n      urlParams[APPLICATION_ID_PARAM] = applicationId;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      let options: { [k: string]: object };\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        options = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n      }\n      this.mySock = new WebSocketImpl(this.connURL, [], options);\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  // Keeps track of whether the TransportManager has already chosen a transport to use\n  static globalTransportInitialized_ = false;\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n   * TransportManager has already set up transports_\n   */\n  static get IS_TRANSPORT_INITIALIZED() {\n    return this.globalTransportInitialized_;\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n      TransportManager.globalTransportInitialized_ = true;\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent of (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      `listen() called twice for same path/queryId.`\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = { key: node.key, value: node.value } as unknown as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as unknown as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          namedNode.node as unknown as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key as unknown as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  private startIsInclusive_: boolean;\n\n  private endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    const isWithinStart = this.startIsInclusive_\n      ? this.index_.compare(this.getStartPost(), node) <= 0\n      : this.index_.compare(this.getStartPost(), node) < 0;\n    const isWithinEnd = this.endIsInclusive_\n      ? this.index_.compare(node, this.getEndPost()) <= 0\n      : this.index_.compare(node, this.getEndPost()) < 0;\n    return isWithinStart && isWithinEnd;\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  private readonly startIsInclusive_: boolean;\n\n  private readonly endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          if (!this.withinDirectionalStart(next)) {\n            // if we have not reached the start, skip to the next element\n            continue;\n          } else if (!this.withinDirectionalEnd(next)) {\n            // if we have reached the end, stop adding elements\n            break;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n        }\n\n        let count = 0;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          const inRange =\n            count < this.limit_ &&\n            this.withinDirectionalStart(next) &&\n            this.withinDirectionalEnd(next);\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n\n  private withinDirectionalStart = (node: NamedNode) =>\n    this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\n\n  private withinDirectionalEnd = (node: NamedNode) =>\n    this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\n\n  private withinStartPost = (node: NamedNode) => {\n    const compareRes = this.index_.compare(\n      this.rangedFilter_.getStartPost(),\n      node\n    );\n    return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n  };\n\n  private withinEndPost = (node: NamedNode) => {\n    const compareRes = this.index_.compare(\n      node,\n      this.rangedFilter_.getEndPost()\n    );\n    return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_START_IS_INCLUSIVE = 'sin',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  INDEX_END_IS_INCLUSIVE = 'ein',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AFTER = 'startAfter',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  END_BEFORE = 'endBefore',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false; // can only be true if startSet_ is true\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false; // can only be true if endSet_ is true\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.startAfterSet_ = this.startAfterSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.endBeforeSet_ = this.endBeforeSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    const startParam = queryParams.startAfterSet_\n      ? REST_QUERY_CONSTANTS.START_AFTER\n      : REST_QUERY_CONSTANTS.START_AT;\n    qs[startParam] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[startParam] += ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    const endParam = queryParams.endBeforeSet_\n      ? REST_QUERY_CONSTANTS.END_BEFORE\n      : REST_QUERY_CONSTANTS.END_AT;\n    qs[endParam] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[endParam] += ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE] =\n      !queryParams.startAfterSet_;\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE] =\n      !queryParams.endBeforeSet_;\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue =\n            child.findRootMostMatchingPathAndValue(\n              pathPopFront(relativePath),\n              predicate\n            );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate =\n            writeTreeRefCalcEventCacheAfterServerOverwrite(\n              writesCache,\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree: ImmutableTree<Node>;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === null;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\nexport function resetSyncTreeTag() {\n  syncTreeNextQueryTag_ = 1;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\n *  deduping needs to take place. This flag allows toggling of that behavior\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error,\n  skipListenerDedup = false\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n\n    if (!skipListenerDedup) {\n      /**\n       * We may have just removed one of many listeners and can short-circuit this whole process\n       * We may also not have removed a default listener, in which case all of the descendant listeners should already be\n       * properly set up.\n       */\n\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(query => {\n          return query._queryParams.loadsAllData();\n        });\n      const covered = syncTree.syncPointTree_.findOnPath(\n        path,\n        (relativePath, parentSyncPoint) =>\n          syncPointHasCompleteView(parentSyncPoint)\n      );\n\n      if (removingDefault && !covered) {\n        const subtree = syncTree.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.query;\n            const listener = syncTreeCreateListenerForView_(syncTree, view);\n            syncTree.listenProvider_.startListening(\n              syncTreeQueryForListening_(newQuery),\n              syncTreeTagForQuery(syncTree, newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        }\n        // Otherwise there's nothing below us, so nothing we need to start listening on\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: QueryContext) => {\n            const tagToRemove = syncTree.queryToTagMap.get(\n              syncTreeMakeQueryKey_(queryToRemove)\n            );\n            syncTree.listenProvider_.stopListening(\n              syncTreeQueryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  skipSetupListener = false\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nexport function syncTreeTagForQuery(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey: string): {\n  queryId: string;\n  path: Path;\n} {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\n/**\n * @internal\n */\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\n/**\n * @internal\n */\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { ValueEventRegistration } from '../api/Reference_impl';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration,\n  syncTreeTagForQuery\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will wait until the\n *  repo has established a connection and then request the value for `query`.\n * If the client is not able to retrieve the query result for another reason,\n * it reports an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: ValueEventRegistration\n): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload).withIndex(\n        query._queryParams.getIndex()\n      );\n      /**\n       * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\n       * Add an event registration,\n       * Update data at the path,\n       * Raise any events,\n       * Cleanup the SyncTree\n       */\n      syncTreeAddEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        true\n      );\n      let events: Event[];\n      if (query._queryParams.loadsAllData()) {\n        events = syncTreeApplyServerOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node\n        );\n      } else {\n        const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n        events = syncTreeApplyTaggedQueryOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node,\n          tag\n        );\n      }\n      /*\n       * We need to raise events in the scenario where `get()` is called at a parent path, and\n       * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\n       * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\n       * and its corresponding serverCache, including the child location where `onValue` is called. Then,\n       * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\n       * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\n       * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\n       * ensure the corresponding child events will get fired.\n       */\n      eventQueueRaiseEventsForChangedPath(\n        repo.eventQueue_,\n        query._path,\n        events\n      );\n      syncTreeRemoveEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        null,\n        true\n      );\n      return node;\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      webSocketOnly,\n      nodeAdmin,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (dataURL: string): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\n\nimport { DataSnapshot as ExpDataSnapshot } from '../../api/Reference_impl';\nimport { Path } from '../util/Path';\n\nimport { EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) {}\n  getPath(): Path {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType(): string {\n    return this.eventType;\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n  getPath(): Path {\n    return this.path;\n  }\n  getEventType(): string {\n    return 'cancel';\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { DataSnapshot } from '../../api/Reference_impl';\nimport { Repo } from '../Repo';\nimport { Path } from '../util/Path';\n\nimport { Change } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport { QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n * to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n *\n * @internal\n */\nexport interface UserCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext {\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) {}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error: Error): void {\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback(): boolean {\n    return !!this.cancelCallback;\n  }\n\n  matches(other: CallbackContext): boolean {\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback !== undefined &&\n        this.snapshotCallback.userCallback ===\n          other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n  }\n}\n\nexport interface QueryContext {\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoOnDisconnectCancel,\n  repoOnDisconnectSet,\n  repoOnDisconnectSetWithPriority,\n  repoOnDisconnectUpdate\n} from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport {\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validatePriority,\n  validateWritablePath\n} from '../core/util/validation';\n\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\nexport class OnDisconnect {\n  /** @hideconstructor */\n  constructor(private _repo: Repo, private _path: Path) {}\n\n  /**\n   * Cancels all previously queued `onDisconnect()` set or update events for this\n   * location and all children.\n   *\n   * If a write has been queued for this location via a `set()` or `update()` at a\n   * parent location, the write at this location will be canceled, though writes\n   * to sibling locations will still occur.\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  cancel(): Promise<void> {\n    const deferred = new Deferred<void>();\n    repoOnDisconnectCancel(\n      this._repo,\n      this._path,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is deleted when the client is disconnected\n   * (due to closing the browser, navigating to a new page, or network issues).\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  remove(): Promise<void> {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      null,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value when the\n   * client is disconnected (due to closing the browser, navigating to a new page,\n   * or network issues).\n   *\n   * `set()` is especially useful for implementing \"presence\" systems, where a\n   * value should be changed or cleared when a user disconnects so that they\n   * appear \"offline\" to other users. See\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n   * for more information.\n   *\n   * Note that `onDisconnect` operations are only triggered once. If you want an\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\n   * the `onDisconnect` operations each time.\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  set(value: unknown): Promise<void> {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      value,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value and priority\n   * when the client is disconnected (due to closing the browser, navigating to a\n   * new page, or network issues).\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @param priority - The priority to be written (string, number, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null\n  ): Promise<void> {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      value,\n      this._path,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSetWithPriority(\n      this._repo,\n      this._path,\n      value,\n      priority,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Writes multiple values at this location when the client is disconnected (due\n   * to closing the browser, navigating to a new page, or network issues).\n   *\n   * The `values` argument contains multiple property-value pairs that will be\n   * written to the Database together. Each child property can either be a simple\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\n   * from the current location to the data to update.\n   *\n   * As opposed to the `set()` method, `update()` can be use to selectively update\n   * only the referenced properties at the current location (instead of replacing\n   * all the child properties at the current location).\n   *\n   * @param values - Object containing multiple values.\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  update(values: object): Promise<void> {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      values,\n      this._path,\n      false\n    );\n    const deferred = new Deferred<void>();\n    repoOnDisconnectUpdate(\n      this._repo,\n      this._path,\n      values as Record<string, unknown>,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathChild,\n  pathParent,\n  pathToUrlEncodedString,\n  pathIsEmpty\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `DataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: DataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  const callbackContext = new CallbackContext(() => {});\n  const container = new ValueEventRegistration(callbackContext);\n  return repoGetValue(query._repo, query, container).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\n * the respective `on*` callbacks.\n *\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value less than or equal\n * to the specified value and a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  warn,\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { TransportManager } from '../realtime/TransportManager';\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\n\nimport { ReferenceImpl } from './Reference_impl';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined' && process.env) {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app.name, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a `Database` instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\nfunction checkTransportInit() {\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n    warn(\n      'Transport has already been initialized. Please call this function before calling ref or setting up a listener'\n    );\n  }\n}\n\n/**\n * Force the use of websockets instead of longPolling.\n */\nexport function forceWebSockets() {\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\nexport function forceLongPolling() {\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  const db = _getProvider(app, 'database').getImmediate({\n    identifier: url\n  }) as Database;\n  const emulator = getDefaultEmulatorHostnameAndPort('database');\n  if (emulator) {\n    connectDatabaseEmulator(db, ...emulator);\n  }\n  return db;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from '../package.json';\nimport { setSDKVersion } from '../src/core/version';\n\nimport { repoManagerDatabaseFromApp } from './api/Database';\n\nexport function registerDatabase(variant?: string): void {\n  setSDKVersion(SDK_VERSION);\n  _registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(\n          app,\n          authProvider,\n          appCheckProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nexport function serverTimestamp(): object {\n  return SERVER_TIMESTAMP;\n}\n\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nexport function increment(delta: number): object {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance, Deferred } from '@firebase/util';\n\nimport { repoStartTransaction } from '../core/Repo';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { validateWritablePath } from '../core/util/validation';\n\nimport { DatabaseReference } from './Reference';\nimport { DataSnapshot, onValue, ReferenceImpl } from './Reference_impl';\n\n/** An options object to configure transactions. */\nexport interface TransactionOptions {\n  /**\n   * By default, events are raised each time the transaction update function\n   * runs. So if it is run multiple times, you may see intermediate states. You\n   * can set this to false to suppress these intermediate states and instead\n   * wait until the transaction has completed before events are raised.\n   */\n  readonly applyLocally?: boolean;\n}\n\n/**\n * A type for the resolve value of {@link runTransaction}.\n */\nexport class TransactionResult {\n  /** @hideconstructor */\n  constructor(\n    /** Whether the transaction was successfully committed. */\n    readonly committed: boolean,\n    /** The resulting data snapshot. */\n    readonly snapshot: DataSnapshot\n  ) {}\n\n  /** Returns a JSON-serializable representation of this object. */\n  toJSON(): object {\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `runTransaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `runTransaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\n * callback to handle success and failure.\n */\nexport function runTransaction(\n  ref: DatabaseReference,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  transactionUpdate: (currentData: any) => unknown,\n  options?: TransactionOptions\n): Promise<TransactionResult> {\n  ref = getModularInstance(ref);\n\n  validateWritablePath('Reference.transaction', ref._path);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw (\n      'Reference.transaction failed: ' + ref.key + ' is a read-only object.'\n    );\n  }\n\n  const applyLocally = options?.applyLocally ?? true;\n  const deferred = new Deferred<TransactionResult>();\n\n  const promiseComplete = (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => {\n    let dataSnapshot: DataSnapshot | null = null;\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(\n        node,\n        new ReferenceImpl(ref._repo, ref._path),\n        PRIORITY_INDEX\n      );\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  };\n\n  // Add a watch to make sure we get server updates.\n  const unwatcher = onValue(ref, () => {});\n\n  repoStartTransaction(\n    ref._repo,\n    ref._path,\n    transactionUpdate,\n    promiseComplete,\n    unwatcher,\n    applyLocally\n  );\n\n  return deferred.promise;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Connection } from '../realtime/Connection';\n\nimport { repoManagerForceRestClient } from './Database';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @internal\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE =\n  /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * Firebase Realtime Database\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Database } from './api/Database';\nimport { registerDatabase } from './register';\n\nexport * from './api';\n\nregisterDatabase();\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'database': Database;\n  }\n}\n","import { getFilmDataById, objData } from './postUserIntoDb';\n\nexport function checkDbCollectionForMatches(userId, reference) {\n  const obj = getFilmDataById(userId, reference);\n\n  // console.log(objData);\n  // console.log('You already have this movie ');\n}\n","import {\n  postUserIntoDatebase,\n  getUserDataById,\n} from '../user-service/postUserIntoDb';\nimport { app } from './initFirebase';\nimport {\n  notifySuccessMessage,\n  notifyInfoMessage,\n} from '../helpers/notifyMessages';\n\n// Initialize Firebase\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from 'firebase/auth';\nimport { async } from '@firebase/util';\nimport { checkUserAuth } from '../user-service/userAuthChecker';\nimport RenderApi from '../helpers/renderFuncApi';\n// // SIGN IN\nconst auth = getAuth();\nconst signInLinck = document.querySelector('.menu__link-js');\n\nconst renderUserHeader = new RenderApi();\n// console.log(signIn.href);\n// if ((window.location.href = 'user-page')) {\n//   signInLinck.removeEventListener('click', onSignIn);\n// }\n\n// check auth\ncheckUserAuth(auth, renderUserHeader, renderUserHeader.renderMarkup);\n\nsignInLinck.addEventListener('click', onSignIn);\nconsole.log(auth);\n\nasync function onSignIn() {\n  console.log('working');\n\n  const provider = new GoogleAuthProvider();\n\n  signInWithPopup(auth, provider)\n    .then(result => {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n\n      const credential = GoogleAuthProvider.credentialFromResult(result);\n      const token = credential.accessToken;\n      // The signed-in user info.\n      console.log(token);\n\n      const user = result.user;\n      console.log(user);\n      postUserIntoDatebase(user);\n      // getUserDataById(user.uid, 'userData');\n\n      if (user) {\n        renderUserHeader.renderMarkup({\n          selector: '.menu__list',\n          innerHtml: true,\n          createMarkypFunc:\n            renderUserHeader.createAuthorizatedUserHeaderMarkup(),\n        });\n        notifySuccessMessage('You are in!');\n      }\n\n      // ...\n    })\n    .catch(error => {\n      // Handle Errors here.\n      console.error(error);\n      const errorCode = error.code;\n      console.error(errorCode);\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      console.error(errorMessage);\n      const email = error.customData.email;\n      // The AuthCredential type that was used.\n      console.error(email);\n      const credential = GoogleAuthProvider.credentialFromError(error);\n      // ...\n      console.error(credential);\n    });\n}\n\n// LOG OUT\n","import { onAuthStateChanged } from 'firebase/auth';\nexport function checkUserAuth(auth, renderApiCopy, render) {\n  onAuthStateChanged(auth, user => {\n    if (user) {\n      // User is signed in, see docs for a list of available properties\n      // https://firebase.google.com/docs/reference/js/firebase.User\n      render({\n        selector: '.menu__list',\n        innerHtml: true,\n        createMarkypFunc: renderApiCopy.createAuthorizatedUserHeaderMarkup(),\n      });\n      const uid = user.uid;\n      // ...\n    } else {\n      // User is signed out\n      // ...\n\n      console.log('not authorizate');\n      //   location.reload();\n    }\n  });\n}\n","import RenderApi from '../helpers/renderFuncApi';\nimport FetchFilmsApi from '../helpers/fetchFilmsApi';\nimport getFilmSearchCheck from '../checkers/filmSearchChecker';\nimport { refs } from '../helpers/refsApiServ';\nimport { getErrMessage } from '../checkers/filmSearchChecker';\nconst renderApi = new RenderApi();\n\nconst apiSearch = new FetchFilmsApi({\n  baseURL: 'https://api.themoviedb.org/3/',\n});\nconsole.log();\nif (!window.location.href.includes('user-page')) {\n  refs.form.addEventListener('submit', onSearchBtnClick);\n} else {\n  refs.form.removeEventListener('submit', onSearchBtnClick);\n}\n\nexport default function onSearchBtnClick(e) {\n  e.preventDefault();\n\n  const value = e.currentTarget.elements.search_user.value.trim();\n\n  apiSearch.actualQuery = value;\n  getFilmSearchCheck(value);\n\n  apiSearch.incrementPage({ step: 1 });\n}\n\nexport async function getSearchedFilm() {\n  const films = await apiSearch.getSearchFilmsData({});\n  const genresObj = await apiSearch.getGenresList({});\n  const genres = genresObj.data.genres;\n  const filmsArrLength = films.data.results.length;\n\n  if (!filmsArrLength) {\n    return getErrMessage({ addMessage: true });\n  }\n\n  const markup = renderApi.createFilmCardsMarkup(films.data.results, genres);\n\n  renderApi.renderMarkup({\n    selector: '.films__list',\n    innerHtml: true,\n    innerHTMLMarkup: '',\n    insAdHtmltype: 'beforeend',\n    createMarkypFunc: markup,\n  });\n}\n","import { getSearchedFilm } from '../main/searchMovie';\nimport { refs } from '../helpers/refsApiServ';\n\nexport default function getFilmSearchCheck(value) {\n  if (!value) {\n    getErrMessage({ addMessage: true });\n    return;\n  }\n\n  getErrMessage({ addMessage: false });\n  getSearchedFilm();\n}\n\nexport function getErrMessage({ addMessage }) {\n  if (!addMessage) {\n    const clearMessage = () => {\n      refs.searchError.classList.add('is-hidden');\n    };\n    return setTimeout(clearMessage, 3000);\n  }\n  return refs.searchError.classList.remove('is-hidden');\n}\n","import { Loading } from 'notiflix/build/notiflix-loading-aio';\n\nclass SpinneroOnLoadingApi {\n  constructor({\n    label = 'Loading',\n    options = {\n      backgroundColor: 'rgba(0,0,0,0.8)',\n      svgColor: '#FF6B08',\n    },\n  }) {\n    this.label = label;\n    this.options = options;\n    this.intervalId = null;\n  }\n  enabled({ timeDelay = 20, delayAfterStop = 400 }) {\n    Loading.arrows(this.label, this.options);\n    this.percentageLoading(timeDelay, delayAfterStop);\n  }\n  disabled(delayAfterStop) {\n    Loading.change('Ready!');\n    clearInterval(this.intervalId);\n    Loading.remove(delayAfterStop);\n  }\n  percentageLoading(timeDelay, delayAfterStop) {\n    let count = 0;\n    const limit = 100;\n    this.intervalId = setInterval(() => {\n      Loading.change(`${this.label} ${(count += 1)}%`);\n\n      if (count === limit) {\n        Loading.change('Ready!');\n        this.disabled(delayAfterStop);\n      }\n    }, timeDelay);\n  }\n}\nexport default SpinneroOnLoadingApi;\n","/*\n* Notiflix Loading AIO (https://notiflix.github.io)\n* Description: This file has been created automatically that using \"notiflix.js\", and \"notiflix.css\" files.\n* Version: 3.2.5\n* Author: Furkan MT (https://github.com/furcan)\n* Copyright 2019 - 2022 Notiflix, MIT Licence (https://opensource.org/licenses/MIT)\n*/\n\n/* global define */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], function () {\n      return factory(root);\n    });\n  } else if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = factory(root);\n  } else {\n    root.Notiflix = factory(root);\n  }\n})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this, function (window) {\n\n  'use strict';\n\n  // COMMON: SSR check: begin\n  if (typeof window === 'undefined' && typeof window.document === 'undefined') {\r\n    return false;\r\n  }\n  // COMMON: SSR check: end\n\n  // COMMON: Variables: begin\n  var notiflixNamespace = 'Notiflix';\r\n  var notiflixConsoleDocs = '\\n\\nVisit documentation page to learn more: https://notiflix.github.io/documentation';\r\n  var defaultFontFamily = '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif';\n  // COMMON: Variables: end\n\n  // LOADING: Default Settings: begin\n  var typesLoading = {\r\n    Standard: 'Standard',\r\n    Hourglass: 'Hourglass',\r\n    Circle: 'Circle',\r\n    Arrows: 'Arrows',\r\n    Dots: 'Dots',\r\n    Pulse: 'Pulse',\r\n    Custom: 'Custom',\r\n    Notiflix: 'Notiflix',\r\n  };\r\n  var newLoadingSettings;\r\n  var loadingSettings = {\r\n    ID: 'NotiflixLoadingWrap', // can not customizable\r\n    className: 'notiflix-loading',\r\n    zindex: 4000,\r\n    backgroundColor: 'rgba(0,0,0,0.8)',\r\n    rtl: false,\r\n    fontFamily: 'Quicksand',\r\n    cssAnimation: true,\r\n    cssAnimationDuration: 400,\r\n    clickToClose: false,\r\n    customSvgUrl: null,\r\n    customSvgCode: null,\r\n    svgSize: '80px',\r\n    svgColor: '#32c682',\r\n    messageID: 'NotiflixLoadingMessage',\r\n    messageFontSize: '15px',\r\n    messageMaxLength: 34,\r\n    messageColor: '#dcdcdc',\r\n  };\n  // LOADING: Default Settings: end\n\n  // COMMON: Console Error: begin\n  var commonConsoleError = function (message) {\r\n    return console.error('%c ' + notiflixNamespace + ' Error ', 'padding:2px;border-radius:20px;color:#fff;background:#ff5549', '\\n' + message + notiflixConsoleDocs);\r\n  };\n  // COMMON: Console Error: end\n\n  // COMMON: Check Head or Body: begin\n  var commonCheckHeadOrBody = function (element) {\r\n    if (!element) { element = 'head'; }\r\n    if (window.document[element] === null) {\r\n      commonConsoleError('\\nNotiflix needs to be appended to the \"<' + element + '>\" element, but you called it before the \"<' + element + '>\" element has been created.');\r\n      return false;\r\n    }\r\n    return true;\r\n  };\n  // COMMON: Check Head or Body: end\n\n  // COMMON: Set Internal CSS Codes: begin\n  var commonSetInternalCSSCodes = function (getInternalCSSCodes, styleElementId) {\r\n    // check doc head\r\n    if (!commonCheckHeadOrBody('head')) { return false; }\r\n\n    // internal css\r\n    if (getInternalCSSCodes() !== null && !window.document.getElementById(styleElementId)) {\r\n      var internalCSS = window.document.createElement('style');\r\n      internalCSS.id = styleElementId;\r\n      internalCSS.innerHTML = getInternalCSSCodes();\r\n      window.document.head.appendChild(internalCSS);\r\n    }\r\n  };\n  // COMMON: Set Internal CSS Codes: end\n\n  // COMMON: Extend Options: begin\n  var commonExtendOptions = function () {\r\n    // variables\r\n    var extended = {};\r\n    var deep = false;\r\n    var i = 0;\r\n    // check if a deep merge\r\n    if (Object.prototype.toString.call(arguments[0]) === '[object Boolean]') {\r\n      deep = arguments[0];\r\n      i++;\r\n    }\r\n    // merge the object into the extended object\r\n    var merge = function (obj) {\r\n      for (var prop in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, prop)) {\r\n          // if property is an object, merge properties\r\n          if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\r\n            extended[prop] = commonExtendOptions(extended[prop], obj[prop]);\r\n          } else {\r\n            extended[prop] = obj[prop];\r\n          }\r\n        }\r\n      }\r\n    };\r\n    // loop through each object and conduct a merge\r\n    for (; i < arguments.length; i++) {\r\n      merge(arguments[i]);\r\n    }\r\n    return extended;\r\n  };\n  // COMMON: Extend Options: end\n\n  // COMMON: Get Plaintext: begin\n  var commonGetPlaintext = function (html) {\r\n    var htmlPool = window.document.createElement('div');\r\n    htmlPool.innerHTML = html;\r\n    return htmlPool.textContent || htmlPool.innerText || '';\r\n  };\n  // COMMON: Get Plaintext: end\n\n  // LOADING && BLOCK: SVG Icon Standard: begin\n  var loadingAndBlockSvgIconStandard = function (width, color) {\r\n    if (!width) { width = '60px'; }\r\n    if (!color) { color = '#32c682'; }\r\n    var standard = '<svg xmlns=\"http://www.w3.org/2000/svg\" stroke=\"' + color + '\" width=\"' + width + '\" height=\"' + width + '\" transform=\"scale(.8)\" viewBox=\"0 0 38 38\"><g fill=\"none\" fill-rule=\"evenodd\" stroke-width=\"2\" transform=\"translate(1 1)\"><circle cx=\"18\" cy=\"18\" r=\"18\" stroke-opacity=\".25\"/><path d=\"M36 18c0-9.94-8.06-18-18-18\"><animateTransform attributeName=\"transform\" dur=\"1s\" from=\"0 18 18\" repeatCount=\"indefinite\" to=\"360 18 18\" type=\"rotate\"/></path></g></svg>';\r\n    return standard;\r\n  };\n  // LOADING && BLOCK: SVG Icon Standard: end\n\n  // LOADING && BLOCK: SVG Icon Hourglass: begin\n  var loadingAndBlockSvgIconHourglass = function (width, color) {\r\n    if (!width) { width = '60px'; }\r\n    if (!color) { color = '#32c682'; }\r\n    var hourglass = '<svg xmlns=\"http://www.w3.org/2000/svg\" id=\"NXLoadingHourglass\" fill=\"' + color + '\" width=\"' + width + '\" height=\"' + width + '\" viewBox=\"0 0 200 200\"><style>@-webkit-keyframes NXhourglass5-animation{0%{-webkit-transform:scale(1,1);transform:scale(1,1)}16.67%{-webkit-transform:scale(1,.8);transform:scale(1,.8)}33.33%{-webkit-transform:scale(.88,.6);transform:scale(.88,.6)}37.5%{-webkit-transform:scale(.85,.55);transform:scale(.85,.55)}41.67%{-webkit-transform:scale(.8,.5);transform:scale(.8,.5)}45.83%{-webkit-transform:scale(.75,.45);transform:scale(.75,.45)}50%{-webkit-transform:scale(.7,.4);transform:scale(.7,.4)}54.17%{-webkit-transform:scale(.6,.35);transform:scale(.6,.35)}58.33%{-webkit-transform:scale(.5,.3);transform:scale(.5,.3)}83.33%,to{-webkit-transform:scale(.2,0);transform:scale(.2,0)}}@keyframes NXhourglass5-animation{0%{-webkit-transform:scale(1,1);transform:scale(1,1)}16.67%{-webkit-transform:scale(1,.8);transform:scale(1,.8)}33.33%{-webkit-transform:scale(.88,.6);transform:scale(.88,.6)}37.5%{-webkit-transform:scale(.85,.55);transform:scale(.85,.55)}41.67%{-webkit-transform:scale(.8,.5);transform:scale(.8,.5)}45.83%{-webkit-transform:scale(.75,.45);transform:scale(.75,.45)}50%{-webkit-transform:scale(.7,.4);transform:scale(.7,.4)}54.17%{-webkit-transform:scale(.6,.35);transform:scale(.6,.35)}58.33%{-webkit-transform:scale(.5,.3);transform:scale(.5,.3)}83.33%,to{-webkit-transform:scale(.2,0);transform:scale(.2,0)}}@-webkit-keyframes NXhourglass3-animation{0%{-webkit-transform:scale(1,.02);transform:scale(1,.02)}79.17%,to{-webkit-transform:scale(1,1);transform:scale(1,1)}}@keyframes NXhourglass3-animation{0%{-webkit-transform:scale(1,.02);transform:scale(1,.02)}79.17%,to{-webkit-transform:scale(1,1);transform:scale(1,1)}}@-webkit-keyframes NXhourglass1-animation{0%,83.33%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(180deg);transform:rotate(180deg)}}@keyframes NXhourglass1-animation{0%,83.33%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(180deg);transform:rotate(180deg)}}#NXLoadingHourglass *{-webkit-animation-duration:1.2s;animation-duration:1.2s;-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite;-webkit-animation-timing-function:cubic-bezier(0,0,1,1);animation-timing-function:cubic-bezier(0,0,1,1)}</style><g data-animator-group=\"true\" data-animator-type=\"1\" style=\"-webkit-animation-name:NXhourglass1-animation;animation-name:NXhourglass1-animation;-webkit-transform-origin:50% 50%;transform-origin:50% 50%;transform-box:fill-box\"><g id=\"NXhourglass2\" fill=\"inherit\"><g data-animator-group=\"true\" data-animator-type=\"2\" style=\"-webkit-animation-name:NXhourglass3-animation;animation-name:NXhourglass3-animation;-webkit-animation-timing-function:cubic-bezier(.42,0,.58,1);animation-timing-function:cubic-bezier(.42,0,.58,1);-webkit-transform-origin:50% 100%;transform-origin:50% 100%;transform-box:fill-box\" opacity=\".4\"><path id=\"NXhourglass4\" d=\"M100 100l-34.38 32.08v31.14h68.76v-31.14z\"/></g><g data-animator-group=\"true\" data-animator-type=\"2\" style=\"-webkit-animation-name:NXhourglass5-animation;animation-name:NXhourglass5-animation;-webkit-transform-origin:50% 100%;transform-origin:50% 100%;transform-box:fill-box\" opacity=\".4\"><path id=\"NXhourglass6\" d=\"M100 100L65.62 67.92V36.78h68.76v31.14z\"/></g><path d=\"M51.14 38.89h8.33v14.93c0 15.1 8.29 28.99 23.34 39.1 1.88 1.25 3.04 3.97 3.04 7.08s-1.16 5.83-3.04 7.09c-15.05 10.1-23.34 23.99-23.34 39.09v14.93h-8.33a4.859 4.859 0 1 0 0 9.72h97.72a4.859 4.859 0 1 0 0-9.72h-8.33v-14.93c0-15.1-8.29-28.99-23.34-39.09-1.88-1.26-3.04-3.98-3.04-7.09s1.16-5.83 3.04-7.08c15.05-10.11 23.34-24 23.34-39.1V38.89h8.33a4.859 4.859 0 1 0 0-9.72H51.14a4.859 4.859 0 1 0 0 9.72zm79.67 14.93c0 15.87-11.93 26.25-19.04 31.03-4.6 3.08-7.34 8.75-7.34 15.15 0 6.41 2.74 12.07 7.34 15.15 7.11 4.78 19.04 15.16 19.04 31.03v14.93H69.19v-14.93c0-15.87 11.93-26.25 19.04-31.02 4.6-3.09 7.34-8.75 7.34-15.16 0-6.4-2.74-12.07-7.34-15.15-7.11-4.78-19.04-15.16-19.04-31.03V38.89h61.62v14.93z\"/></g></g></svg>';\r\n    return hourglass;\r\n  };\n  // LOADING && BLOCK: SVG Icon Hourglass: end\n\n  // LOADING && BLOCK: SVG Icon Circle: begin\n  var loadingAndBlockSvgIconCircle = function (width, color) {\r\n    if (!width) { width = '60px'; }\r\n    if (!color) { color = '#32c682'; }\r\n    var circle = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + width + '\" height=\"' + width + '\" viewBox=\"25 25 50 50\" style=\"-webkit-animation:rotate 2s linear infinite;animation:rotate 2s linear infinite;height:' + width + ';-webkit-transform-origin:center center;-ms-transform-origin:center center;transform-origin:center center;width:' + width + ';position:absolute;top:0;left:0;margin:auto\"><style>@-webkit-keyframes rotate{to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes rotate{to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@-webkit-keyframes dash{0%{stroke-dasharray:1,200;stroke-dashoffset:0}50%{stroke-dasharray:89,200;stroke-dashoffset:-35}to{stroke-dasharray:89,200;stroke-dashoffset:-124}}@keyframes dash{0%{stroke-dasharray:1,200;stroke-dashoffset:0}50%{stroke-dasharray:89,200;stroke-dashoffset:-35}to{stroke-dasharray:89,200;stroke-dashoffset:-124}}</style><circle cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke=\"' + color + '\" stroke-width=\"2\" style=\"-webkit-animation:dash 1.5s ease-in-out infinite,color 1.5s ease-in-out infinite;animation:dash 1.5s ease-in-out infinite,color 1.5s ease-in-out infinite\" stroke-dasharray=\"150 200\" stroke-dashoffset=\"-10\" stroke-linecap=\"round\"/></svg>';\r\n    return circle;\r\n  };\n  // LOADING && BLOCK: SVG Icon Circle: end\n\n  // LOADING && BLOCK: SVG Icon Arrows: begin\n  var loadingAndBlockSvgIconArrows = function (width, color) {\r\n    if (!width) { width = '60px'; }\r\n    if (!color) { color = '#32c682'; }\r\n    var arrows = '<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"' + color + '\" width=\"' + width + '\" height=\"' + width + '\" viewBox=\"0 0 128 128\"><g><path fill=\"inherit\" d=\"M109.25 55.5h-36l12-12a29.54 29.54 0 0 0-49.53 12H18.75A46.04 46.04 0 0 1 96.9 31.84l12.35-12.34v36zm-90.5 17h36l-12 12a29.54 29.54 0 0 0 49.53-12h16.97A46.04 46.04 0 0 1 31.1 96.16L18.74 108.5v-36z\"/><animateTransform attributeName=\"transform\" dur=\"1.5s\" from=\"0 64 64\" repeatCount=\"indefinite\" to=\"360 64 64\" type=\"rotate\"/></g></svg>';\r\n    return arrows;\r\n  };\n  // LOADING && BLOCK: SVG Icon Arrows: end\n\n  // LOADING && BLOCK: SVG Icon Dots: begin\n  var loadingAndBlockSvgIconDots = function (width, color) {\r\n    if (!width) { width = '60px'; }\r\n    if (!color) { color = '#32c682'; }\r\n    var dots = '<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"' + color + '\" width=\"' + width + '\" height=\"' + width + '\" viewBox=\"0 0 100 100\"><g transform=\"translate(25 50)\"><circle r=\"9\" fill=\"inherit\" transform=\"scale(.239)\"><animateTransform attributeName=\"transform\" begin=\"-0.266s\" calcMode=\"spline\" dur=\"0.8s\" keySplines=\"0.3 0 0.7 1;0.3 0 0.7 1\" keyTimes=\"0;0.5;1\" repeatCount=\"indefinite\" type=\"scale\" values=\"0;1;0\"/></circle></g><g transform=\"translate(50 50)\"><circle r=\"9\" fill=\"inherit\" transform=\"scale(.00152)\"><animateTransform attributeName=\"transform\" begin=\"-0.133s\" calcMode=\"spline\" dur=\"0.8s\" keySplines=\"0.3 0 0.7 1;0.3 0 0.7 1\" keyTimes=\"0;0.5;1\" repeatCount=\"indefinite\" type=\"scale\" values=\"0;1;0\"/></circle></g><g transform=\"translate(75 50)\"><circle r=\"9\" fill=\"inherit\" transform=\"scale(.299)\"><animateTransform attributeName=\"transform\" begin=\"0s\" calcMode=\"spline\" dur=\"0.8s\" keySplines=\"0.3 0 0.7 1;0.3 0 0.7 1\" keyTimes=\"0;0.5;1\" repeatCount=\"indefinite\" type=\"scale\" values=\"0;1;0\"/></circle></g></svg>';\r\n    return dots;\r\n  };\n  // LOADING && BLOCK: SVG Icon Dots: end\n\n  // LOADING && BLOCK: SVG Icon Pulse: begin\n  var loadingAndBlockSvgIconPulse = function (width, color) {\r\n    if (!width) { width = '60px'; }\r\n    if (!color) { color = '#32c682'; }\r\n    var pulse = '<svg xmlns=\"http://www.w3.org/2000/svg\" stroke=\"' + color + '\" width=\"' + width + '\" height=\"' + width + '\" viewBox=\"0 0 44 44\"><g fill=\"none\" fill-rule=\"evenodd\" stroke-width=\"2\"><circle cx=\"22\" cy=\"22\" r=\"1\"><animate attributeName=\"r\" begin=\"0s\" calcMode=\"spline\" dur=\"1.8s\" keySplines=\"0.165, 0.84, 0.44, 1\" keyTimes=\"0; 1\" repeatCount=\"indefinite\" values=\"1; 20\"/><animate attributeName=\"stroke-opacity\" begin=\"0s\" calcMode=\"spline\" dur=\"1.8s\" keySplines=\"0.3, 0.61, 0.355, 1\" keyTimes=\"0; 1\" repeatCount=\"indefinite\" values=\"1; 0\"/></circle><circle cx=\"22\" cy=\"22\" r=\"1\"><animate attributeName=\"r\" begin=\"-0.9s\" calcMode=\"spline\" dur=\"1.8s\" keySplines=\"0.165, 0.84, 0.44, 1\" keyTimes=\"0; 1\" repeatCount=\"indefinite\" values=\"1; 20\"/><animate attributeName=\"stroke-opacity\" begin=\"-0.9s\" calcMode=\"spline\" dur=\"1.8s\" keySplines=\"0.3, 0.61, 0.355, 1\" keyTimes=\"0; 1\" repeatCount=\"indefinite\" values=\"1; 0\"/></circle></g></svg>';\r\n    return pulse;\r\n  };\n  // LOADING && BLOCK: SVG Icon Pulse: end\n\n  // LOADING && BLOCK: SVG Icon Notiflix: begin\n  var loadingAndBlockSvgIconNotiflix = function (width, white, green) {\r\n    if (!width) { width = '60px'; }\r\n    if (!white) { white = '#f8f8f8'; }\r\n    if (!green) { green = '#32c682'; }\r\n    var notiflixIcon = '<svg xmlns=\"http://www.w3.org/2000/svg\" id=\"NXLoadingNotiflixLib\" width=\"' + width + '\" height=\"' + width + '\" viewBox=\"0 0 200 200\"><defs><style>@keyframes notiflix-n{0%{stroke-dashoffset:1000}to{stroke-dashoffset:0}}@keyframes notiflix-x{0%{stroke-dashoffset:1000}to{stroke-dashoffset:0}}@keyframes notiflix-dot{0%,to{stroke-width:0}50%{stroke-width:12}}.nx-icon-line{stroke:' + white + ';stroke-width:12;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:22;fill:none}</style></defs><path d=\"M47.97 135.05a6.5 6.5 0 1 1 0 13 6.5 6.5 0 0 1 0-13z\" style=\"animation-name:notiflix-dot;animation-timing-function:ease-in-out;animation-duration:1.25s;animation-iteration-count:infinite;animation-direction:normal\" fill=\"' + green + '\" stroke=\"' + green + '\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"22\" stroke-width=\"12\"/><path class=\"nx-icon-line\" d=\"M10.14 144.76V87.55c0-5.68-4.54-41.36 37.83-41.36 42.36 0 37.82 35.68 37.82 41.36v57.21\" style=\"animation-name:notiflix-n;animation-timing-function:linear;animation-duration:2.5s;animation-delay:0s;animation-iteration-count:infinite;animation-direction:normal\" stroke-dasharray=\"500\"/><path class=\"nx-icon-line\" d=\"M115.06 144.49c24.98-32.68 49.96-65.35 74.94-98.03M114.89 46.6c25.09 32.58 50.19 65.17 75.29 97.75\" style=\"animation-name:notiflix-x;animation-timing-function:linear;animation-duration:2.5s;animation-delay:.2s;animation-iteration-count:infinite;animation-direction:normal\" stroke-dasharray=\"500\"/></svg>';\r\n    return notiflixIcon;\r\n  };\n  // LOADING && BLOCK: SVG Icon Notiflix: end\n\n  // LOADING: Get Internal CSS Codes: begin\n  var loadingGetInternalCSSCodes = function () {\r\n    var loadingCSS = '[id^=NotiflixLoadingWrap]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:fixed;z-index:4000;width:100%;height:100%;left:0;top:0;right:0;bottom:0;margin:auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;text-align:center;-webkit-box-sizing:border-box;box-sizing:border-box;background:rgba(0,0,0,.8);font-family:\"Quicksand\",-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif}[id^=NotiflixLoadingWrap] *{-webkit-box-sizing:border-box;box-sizing:border-box}[id^=NotiflixLoadingWrap].nx-loading-click-to-close{cursor:pointer}[id^=NotiflixLoadingWrap]>div[class*=\"-icon\"]{width:60px;height:60px;position:relative;-webkit-transition:top .2s ease-in-out;-o-transition:top .2s ease-in-out;transition:top .2s ease-in-out;margin:0 auto}[id^=NotiflixLoadingWrap]>div[class*=\"-icon\"] img,[id^=NotiflixLoadingWrap]>div[class*=\"-icon\"] svg{max-width:unset;max-height:unset;width:100%;height:auto;position:absolute;left:0;top:0}[id^=NotiflixLoadingWrap]>p{position:relative;margin:10px auto 0;font-family:inherit!important;font-weight:normal;font-size:15px;line-height:1.4;padding:0 10px;width:100%;text-align:center}[id^=NotiflixLoadingWrap].nx-with-animation{-webkit-animation:loading-animation-fade .3s ease-in-out 0s normal;animation:loading-animation-fade .3s ease-in-out 0s normal}@-webkit-keyframes loading-animation-fade{0%{opacity:0}100%{opacity:1}}@keyframes loading-animation-fade{0%{opacity:0}100%{opacity:1}}[id^=NotiflixLoadingWrap].nx-with-animation.nx-remove{opacity:0;-webkit-animation:loading-animation-fade-remove .3s ease-in-out 0s normal;animation:loading-animation-fade-remove .3s ease-in-out 0s normal}@-webkit-keyframes loading-animation-fade-remove{0%{opacity:1}100%{opacity:0}}@keyframes loading-animation-fade-remove{0%{opacity:1}100%{opacity:0}}[id^=NotiflixLoadingWrap]>p.nx-loading-message-new{-webkit-animation:loading-new-message-fade .3s ease-in-out 0s normal;animation:loading-new-message-fade .3s ease-in-out 0s normal}@-webkit-keyframes loading-new-message-fade{0%{opacity:0}100%{opacity:1}}@keyframes loading-new-message-fade{0%{opacity:0}100%{opacity:1}}';\r\n    return loadingCSS || null;\r\n  };\n  // LOADING: Get Internal CSS Codes: end\n\n  // LOADING: Create: begin\n  var loadingCreate = function (loadingType, messageOrOptions, options, display, delay) {\r\n    // check doc body\r\n    if (!commonCheckHeadOrBody('body')) { return false; }\r\n\n    // if not initialized pretend like init\r\n    if (!newLoadingSettings) {\r\n      Notiflix.Loading.init({});\r\n    }\r\n\n    // create a backup for new settings\r\n    var newLoadingSettingsBackup = commonExtendOptions(true, newLoadingSettings, {});\r\n\n    // check \"messageOrOptions\" and \"options\": begin\r\n    if ((typeof messageOrOptions === 'object' && !Array.isArray(messageOrOptions)) || (typeof options === 'object' && !Array.isArray(options))) {\r\n      // new options\r\n      var newOptions = {};\r\n      if (typeof messageOrOptions === 'object') {\r\n        newOptions = messageOrOptions;\r\n      } else if (typeof options === 'object') {\r\n        newOptions = options;\r\n      }\r\n\n      // extend new settings with the new options\r\n      newLoadingSettings = commonExtendOptions(true, newLoadingSettings, newOptions);\r\n    }\r\n    // check \"messageOrOptions\" and \"options\": end\r\n\n    // check the message\r\n    var message = '';\r\n    if (typeof messageOrOptions === 'string' && messageOrOptions.length > 0) {\r\n      message = messageOrOptions;\r\n    }\r\n\n    // show loading\r\n    if (display) {\r\n\n      // if message settings: begin\r\n      if (message.length > newLoadingSettings.messageMaxLength) {\r\n        message = commonGetPlaintext(message).toString().substring(0, newLoadingSettings.messageMaxLength) + '...';\r\n      } else {\r\n        message = commonGetPlaintext(message).toString();\r\n      }\r\n      var messageHTML = '';\r\n      if (message.length > 0) {\r\n        messageHTML = '<p id=\"' + newLoadingSettings.messageID + '\" class=\"nx-loading-message\" style=\"color:' + newLoadingSettings.messageColor + ';font-size:' + newLoadingSettings.messageFontSize + ';\">' + message + '</p>';\r\n      }\r\n      // if message settings: end\r\n\n      // if cssAnimaion is false => duration: begin\r\n      if (!newLoadingSettings.cssAnimation) {\r\n        newLoadingSettings.cssAnimationDuration = 0;\r\n      }\r\n      // if cssAnimaion is false => duration: end\r\n\n      // svgIcon: begin\r\n      var svgIcon = '';\r\n      if (loadingType === typesLoading.Standard) {\r\n        svgIcon = loadingAndBlockSvgIconStandard(newLoadingSettings.svgSize, newLoadingSettings.svgColor);\r\n      } else if (loadingType === typesLoading.Hourglass) {\r\n        svgIcon = loadingAndBlockSvgIconHourglass(newLoadingSettings.svgSize, newLoadingSettings.svgColor);\r\n      } else if (loadingType === typesLoading.Circle) {\r\n        svgIcon = loadingAndBlockSvgIconCircle(newLoadingSettings.svgSize, newLoadingSettings.svgColor);\r\n      } else if (loadingType === typesLoading.Arrows) {\r\n        svgIcon = loadingAndBlockSvgIconArrows(newLoadingSettings.svgSize, newLoadingSettings.svgColor);\r\n      } else if (loadingType === typesLoading.Dots) {\r\n        svgIcon = loadingAndBlockSvgIconDots(newLoadingSettings.svgSize, newLoadingSettings.svgColor);\r\n      } else if (loadingType === typesLoading.Pulse) {\r\n        svgIcon = loadingAndBlockSvgIconPulse(newLoadingSettings.svgSize, newLoadingSettings.svgColor);\r\n      } else if (\r\n        loadingType === typesLoading.Custom &&\r\n        newLoadingSettings.customSvgCode !== null &&\r\n        newLoadingSettings.customSvgUrl === null\r\n      ) {\r\n        svgIcon = newLoadingSettings.customSvgCode || '';\r\n      } else if (\r\n        loadingType === typesLoading.Custom &&\r\n        newLoadingSettings.customSvgUrl !== null &&\r\n        newLoadingSettings.customSvgCode === null\r\n      ) {\r\n        svgIcon = '<img class=\"nx-custom-loading-icon\" width=\"' + newLoadingSettings.svgSize + '\" height=\"' + newLoadingSettings.svgSize + '\" src=\"' + newLoadingSettings.customSvgUrl + '\" alt=\"Notiflix\">';\r\n      } else if (\r\n        loadingType === typesLoading.Custom &&\r\n        (newLoadingSettings.customSvgUrl === null || newLoadingSettings.customSvgCode === null)\r\n      ) {\r\n        commonConsoleError('You have to set a static SVG url to \"customSvgUrl\" option to use Loading Custom.');\r\n        return false;\r\n      } else {\r\n        svgIcon = loadingAndBlockSvgIconNotiflix(newLoadingSettings.svgSize, '#f8f8f8', '#32c682');\r\n      }\r\n      var svgSizeAsDigit = parseInt((newLoadingSettings.svgSize || '').replace(/[^0-9]/g, ''));\r\n      var winWidth = window.innerWidth;\r\n      var maxSvgWidthPx = svgSizeAsDigit >= winWidth ? (winWidth - 40) + 'px' : svgSizeAsDigit + 'px';\r\n      var svgIconHTML = '<div style=\"width:' + maxSvgWidthPx + '; height:' + maxSvgWidthPx + ';\" class=\"' + newLoadingSettings.className + '-icon' + (message.length > 0 ? ' nx-with-message' : '') + '\">' + svgIcon + '</div>';\r\n      // svgIcon: end\r\n\n      // loading wrap: begin\r\n      var ntflxLoadingWrap = window.document.createElement('div');\r\n      ntflxLoadingWrap.id = loadingSettings.ID;\r\n      ntflxLoadingWrap.className = newLoadingSettings.className + (newLoadingSettings.cssAnimation ? ' nx-with-animation' : '') + (newLoadingSettings.clickToClose ? ' nx-loading-click-to-close' : '');\r\n      ntflxLoadingWrap.style.zIndex = newLoadingSettings.zindex;\r\n      ntflxLoadingWrap.style.background = newLoadingSettings.backgroundColor;\r\n      ntflxLoadingWrap.style.animationDuration = newLoadingSettings.cssAnimationDuration + 'ms';\r\n      ntflxLoadingWrap.style.fontFamily = '\"' + newLoadingSettings.fontFamily + '\", ' + defaultFontFamily;\r\n      ntflxLoadingWrap.style.display = 'flex';\r\n      ntflxLoadingWrap.style.flexWrap = 'wrap';\r\n      ntflxLoadingWrap.style.flexDirection = 'column';\r\n      ntflxLoadingWrap.style.alignItems = 'center';\r\n      ntflxLoadingWrap.style.justifyContent = 'center';\r\n\n      // rtl: begin\r\n      if (newLoadingSettings.rtl) {\r\n        ntflxLoadingWrap.setAttribute('dir', 'rtl');\r\n        ntflxLoadingWrap.classList.add('nx-rtl-on');\r\n      }\r\n      // rtl: end\r\n\n      // append: begin\r\n      ntflxLoadingWrap.innerHTML = svgIconHTML + messageHTML;\r\n\n      // if there is no loading element\r\n      if (!window.document.getElementById(ntflxLoadingWrap.id)) {\r\n        // append\r\n        window.document.body.appendChild(ntflxLoadingWrap);\r\n\n        // if click to close\r\n        if (newLoadingSettings.clickToClose) {\r\n          var loadingWrapElm = window.document.getElementById(ntflxLoadingWrap.id);\r\n          loadingWrapElm.addEventListener('click', function () {\r\n            ntflxLoadingWrap.classList.add('nx-remove');\r\n            var timeout = setTimeout(function () {\r\n              if (ntflxLoadingWrap.parentNode !== null) {\r\n                ntflxLoadingWrap.parentNode.removeChild(ntflxLoadingWrap);\r\n                clearTimeout(timeout);\r\n              }\r\n            }, newLoadingSettings.cssAnimationDuration);\r\n          });\r\n        }\r\n      }\r\n      // append: end\r\n    }\r\n    // remove loading\r\n    else {\r\n      // if there is a loading element\r\n      if (window.document.getElementById(loadingSettings.ID)) {\r\n        var loadingElm = window.document.getElementById(loadingSettings.ID);\r\n        var timeout = setTimeout(function () {\r\n          loadingElm.classList.add('nx-remove');\r\n          var timeout2 = setTimeout(function () {\r\n            if (loadingElm.parentNode !== null) {\r\n              loadingElm.parentNode.removeChild(loadingElm);\r\n              clearTimeout(timeout2);\r\n            }\r\n          }, newLoadingSettings.cssAnimationDuration);\r\n          clearTimeout(timeout);\r\n        }, delay);\r\n      }\r\n    }\r\n\n    // extend new settings with the backup settings\r\n    newLoadingSettings = commonExtendOptions(true, newLoadingSettings, newLoadingSettingsBackup);\r\n  };\n  // LOADING: Create: end\n\n  // LOADING: Change Message: begin\n  var loadingChangeMessage = function (newMessage) {\r\n    // check the new message\r\n    if (typeof newMessage !== 'string') {\r\n      newMessage = '';\r\n    }\r\n    // if has any loading\r\n    var messageWrap = window.document.getElementById(loadingSettings.ID);\r\n    if (messageWrap) {\r\n      // if there is a new message\r\n      if (newMessage.length > 0) {\r\n        // max length: begin\r\n        if (newMessage.length > newLoadingSettings.messageMaxLength) {\r\n          newMessage = commonGetPlaintext(newMessage).substring(0, newLoadingSettings.messageMaxLength) + '...';\r\n        } else {\r\n          newMessage = commonGetPlaintext(newMessage);\r\n        }\r\n        // max length: end\r\n\n        // there is a message element\r\n        var oldMessageElm = messageWrap.getElementsByTagName('p')[0];\r\n        if (oldMessageElm) {\r\n          oldMessageElm.innerHTML = newMessage; // change the message\r\n        }\r\n        // there is no message element\r\n        else {\r\n          // create a new message element: begin\r\n          var newMessageHTML = window.document.createElement('p');\r\n          newMessageHTML.id = newLoadingSettings.messageID;\r\n          newMessageHTML.className = 'nx-loading-message nx-loading-message-new';\r\n          newMessageHTML.style.color = newLoadingSettings.messageColor;\r\n          newMessageHTML.style.fontSize = newLoadingSettings.messageFontSize;\r\n          newMessageHTML.innerHTML = newMessage;\r\n          messageWrap.appendChild(newMessageHTML);\r\n          // create a new message element: end\r\n        }\r\n      }\r\n      // if no message\r\n      else {\r\n        commonConsoleError('Where is the new message?');\r\n      }\r\n    }\r\n  };\n  // LOADING: Change Message: end\n\n  var Notiflix = {\n    Loading: {\r\n      // Init\r\n      init: function (userLoadingOptions) {\r\n        // extend options\r\n        newLoadingSettings = commonExtendOptions(true, loadingSettings, userLoadingOptions);\r\n        // internal css if exist\r\n        commonSetInternalCSSCodes(loadingGetInternalCSSCodes, 'NotiflixLoadingInternalCSS');\r\n      },\r\n      // Merge First Init\r\n      merge: function (userLoadingExtendOptions) {\r\n        // if initialized already\r\n        if (newLoadingSettings) {\r\n          newLoadingSettings = commonExtendOptions(true, newLoadingSettings, userLoadingExtendOptions);\r\n        }\r\n        // initialize first\r\n        else {\r\n          commonConsoleError('You have to initialize the Loading module before call Merge function.');\r\n          return false;\r\n        }\r\n      },\r\n      // Standard\r\n      standard: function (messageOrOptions, options) {\r\n        loadingCreate(typesLoading.Standard, messageOrOptions, options, true, 0); // true => show && 0 => delay\r\n      },\r\n      // Hourglass\r\n      hourglass: function (messageOrOptions, options) {\r\n        loadingCreate(typesLoading.Hourglass, messageOrOptions, options, true, 0); // true => show && 0 => delay\r\n      },\r\n      // Circle\r\n      circle: function (messageOrOptions, options) {\r\n        loadingCreate(typesLoading.Circle, messageOrOptions, options, true, 0); // true => show && 0 => delay\r\n      },\r\n      // Arrows\r\n      arrows: function (messageOrOptions, options) {\r\n        loadingCreate(typesLoading.Arrows, messageOrOptions, options, true, 0); // true => show && 0 => delay\r\n      },\r\n      // Dots\r\n      dots: function (messageOrOptions, options) {\r\n        loadingCreate(typesLoading.Dots, messageOrOptions, options, true, 0); // true => show && 0 => delay\r\n      },\r\n      // Pulse\r\n      pulse: function (messageOrOptions, options) {\r\n        loadingCreate(typesLoading.Pulse, messageOrOptions, options, true, 0); // true => show && 0 => delay\r\n      },\r\n      // Custom\r\n      custom: function (messageOrOptions, options) {\r\n        loadingCreate(typesLoading.Custom, messageOrOptions, options, true, 0); // true => show && 0 => delay\r\n      },\r\n      // Notiflix\r\n      notiflix: function (messageOrOptions, options) {\r\n        loadingCreate(typesLoading.Notiflix, messageOrOptions, options, true, 0); // true => show && 0 => delay\r\n      },\r\n      // Remove\r\n      remove: function (delay) {\r\n        if (typeof delay !== 'number') { delay = 0; }\r\n        loadingCreate(null, null, null, false, delay); // false => hide/remove\r\n      },\r\n      // Change The Message\r\n      change: function (newMessage) {\r\n        loadingChangeMessage(newMessage);\r\n      },\r\n    },\n  };\n\n  if (typeof window.Notiflix === 'object') {\n    return commonExtendOptions(true, window.Notiflix, { Loading: Notiflix.Loading });\n  } else {\n    return { Loading: Notiflix.Loading };\n  }\n\n});","import SpinneroOnLoadingApi from '../helpers/spinnerApi';\n\nexport const spinnerOnMain = new SpinneroOnLoadingApi({\n  options: { backgroundColor: '#000000', svgColor: '#FF6B08' },\n});\nexport const spinnerOnList = new SpinneroOnLoadingApi({});\n","import { fetchApi } from '../main';\nimport { renderApi } from '../main';\nimport { createPages } from '../pagination/createPages';\nimport {genres} from '../helpers/genres'\n\nexport async function renderMarkup() {\n  \n  // console.log(genres)\n  const films = await fetchApi.getAllFilmsData({});\n\n  const markup = renderApi.createFilmCardsMarkup(films.data.results, genres);\n\n  renderApi.renderMarkup({\n    selector: '.films__list',\n    innerHtml: true,\n    createMarkypFunc: markup,\n  });\n\n  createPages(fetchApi.actualPage, fetchApi.totalPages);\n}\n","import { refs } from '../helpers/refsApiServ';\n\nexport function createPages(page, totalPages) {\n  let beforeContainer = ``;\n  let afterContainer = ``;\n\n  // Before\n  if (page >= 5) {\n    beforeContainer += `<div class=\"numb numb--first-page\" data-numb-id='1'>1</div>`;\n  }\n\n  if (page === 4 || page === 5) {\n    beforeContainer += `<div class=\"numb dots\" data-numb-id='${page - 3}'>${\n      page - 3\n    }</div>`;\n  } else if (page >= 6) {\n    beforeContainer += `<div class=\"dots\">...</div>`;\n  }\n\n  if (page >= 3) {\n    beforeContainer += `<div class=\"numb\" data-numb-id='${page - 2}'>${\n      page - 2\n    }</div>`;\n  }\n\n  if (page >= 2) {\n    beforeContainer += `<div class=\"numb\" data-numb-id='${page - 1}'>${\n      page - 1\n    }</div>`;\n  }\n\n  // After\n  if (page <= totalPages - 1) {\n    afterContainer += `<div class=\"numb\" data-numb-id='${page + 1}'>${\n      page + 1\n    }</div>`;\n  }\n\n  if (page <= totalPages - 2) {\n    afterContainer += `<div class=\"numb\" data-numb-id='${page + 2}'>${\n      page + 2\n    }</div>`;\n  }\n\n  if (page === totalPages - 3 || page === totalPages - 4) {\n    afterContainer += `<div class=\"numb dots\" data-numb-id='${page + 3}'>${\n      page + 3\n    }</div>`;\n  } else if (page <= totalPages - 5) {\n    afterContainer += `<div class=\"dots\">...</div>`;\n  }\n\n  if (page <= totalPages - 4) {\n    afterContainer += `<div class=\"numb numb--last-page\" data-numb-id='${totalPages}'>${totalPages}</div>`;\n  }\n\n  // DOM\n  refs.beforeCurPageContainer.innerHTML = beforeContainer;\n  refs.afterCurPageContainer.innerHTML = afterContainer;\n}\n","export const genres = [ \n    { id: 28, name: \"Action\" },\n\n    { id: 12, name: \"Adventure\" },\n\n    {id: 16, name: \"Animation\"},\n\n    {id: 35, name: \"Comedy\"},\n\n    {id: 80, name: \"Crime\"},\n\n    {id: 99, name: \"Documentary\"},\n\n    {id: 18, name: \"Drama\"},\n    \n    {id: 10751, name: \"Family\"},\n    \n    {id: 14, name: \"Fantasy\"},\n\n    {id: 36, name: \"History\"},\n    \n    {id: 27, name: \"Horror\"},\n\n    {id: 10402, name: \"Music\"},\n\n    {id: 9648, name: \"Mystery\"},\n\n    {id: 10749, name: \"Romance\"},\n\n    {id: 878, name: \"Science Fiction\"},\n    \n    {id: 10770, name: \"TV Movie\"},\n    \n    {id: 53, name: \"Thriller\"},\n\n    {id: 10752, name: \"War\"},\n\n    { id: 37, name: \"Western\" }\n]\n\n","import { refs } from './refsApiServ';\nimport onSearchBtnClick from '../main/searchMovie';\n\nrefs.headerUserLink.addEventListener('click', onRemoveFormListner);\n\nfunction onRemoveFormListner() {\n  refs.form.removeEventListener('submit', onSearchBtnClick);\n  // Нужно снять листнер с сабмита при переходе на user-page\n}\n","import './firebase/backend';\nimport './firebase/auth';\nimport FetchFilmsApi from './helpers/fetchFilmsApi';\nimport RenderApi from './helpers/renderFuncApi';\nimport searchMovie from './main/searchMovie';\nimport { spinnerOnMain } from './spinner/spinner';\nimport { renderMarkup } from './main/renderMainMarkup';\nimport { onShowFilmModal } from './modals/filmDetailsModal';\nimport { refs } from './helpers/refsApiServ';\nimport { onCreatePagination } from './pagination/pagination';\nimport {\n  onScroll,\n  onScrollToTopBtn,\n  onScrollToDownBtn,\n} from './helpers/btnScroll';\nimport { themeChange } from './helpers/changeTheme';\nimport { checkLoadPageStatus } from './checkers/pageOnLoadCheker';\nimport './modals/modals';\nimport './helpers/pageChange';\nimport './helpers/simpleLightBox';\n// Class\nexport const fetchApi = new FetchFilmsApi();\nexport const renderApi = new RenderApi();\n\n// First render\nspinnerOnMain.enabled({ timeDelay: 20 });\ncheckLoadPageStatus({ delayAfterStop: 400 });\nrenderMarkup();\n\n// Modal film\nrefs.filmList.addEventListener('click', onShowFilmModal);\n// Pagination\nrefs.pagRef.addEventListener('click', onCreatePagination);\n","import { spinnerOnMain } from '../spinner/spinner';\n\nexport function checkLoadPageStatus({ delayAfterStop = 400 }) {\n  document.addEventListener('DOMContentLoaded', () => {\n    console.log('ready');\n    spinnerOnMain.disabled(delayAfterStop);\n  });\n  return;\n}\n","import { fetchApi } from '../main';\nimport { renderMarkup } from '../main/renderMainMarkup';\nimport { refs } from '../helpers/refsApiServ';\n\nexport function onCreatePagination(e) {\n  const currentPage = refs.currentPage;\n  const nextPage = refs.nextPage;\n  const prevPage = refs.prevPage;\n\n  // Numb page\n  if (e.target.dataset.numbId) {\n    fetchApi.actualPage = Number(e.target.dataset.numbId);\n  }\n\n  // Prev page\n\n  if (e.target.dataset.id === 'prev') {\n    if (fetchApi.actualPage === 1) {\n      return;\n    }\n\n    fetchApi.actualPage -= 1;\n  }\n\n  // Next page\n  if (e.target.dataset.id === 'next') {\n    if (fetchApi.actualPage === fetchApi.totalPages) {\n      return;\n    }\n\n    fetchApi.actualPage += 1;\n  }\n\n  // Toggle disable on next or prev page\n\n  if (fetchApi.actualPage === fetchApi.totalPages) {\n    nextPage.classList.add('disabled');\n  } else if (nextPage.classList.contains('disabled')) {\n    nextPage.classList.remove('disabled');\n  }\n\n  if (fetchApi.actualPage === 1) {\n    prevPage.classList.add('disabled');\n  } else {\n    prevPage.classList.remove('disabled');\n  }\n\n  // Рендер сторінки\n  renderMarkup();\n  currentPage.innerHTML = fetchApi.actualPage;\n}\n"],"names":["Object","defineProperty","module","exports","value","default","receiver","privateMap","action","has","TypeError","get","descriptor","call","obj","privateCollection","set","writable","parcelRequire","$bpxeT","$8MBJY","$2acdf6b80d53b5ce$export$32df5403cbb848d0","genre_ids","genres","release_date","genreIsMany","maxGenreIds","length","slice","genresOfCurrentFilm","map","genre_id","find","oneGenre","id","name","join","date","$2e9d9233884cce36$var$RenderApi","RenderApi","key","data","param","poster_path","title","filmGengres","concat","filmId","fixedGenres","vote_count","fixedVote","fixedPopularity","overview","selector","_innerHtml","innerHtml","_innerHTMLMarkup","innerHTMLMarkup","_insAdHtmltype","insAdHtmltype","createMarkypFunc","elem","document","querySelector","innerHTML","insertAdjacentHTML","$2e9d9233884cce36$export$2e2bcd8739ae039","$37616d1d2d9e1de3$exports","$37616d1d2d9e1de3$var$_classExtractFieldDescriptor","$37616d1d2d9e1de3$var$_classApplyDescriptorGet","$37616d1d2d9e1de3$var$_interopRequireDefault","__esModule","$665bb80dc57e205a$exports","$665bb80dc57e205a$var$_checkPrivateRedeclaration","$a11a0d8e92c06afc$exports","$a11a0d8e92c06afc$var$_classExtractFieldDescriptor","$a11a0d8e92c06afc$var$_classApplyDescriptorSet","$a11a0d8e92c06afc$var$_interopRequireDefault","$l5bVx","$fc8f2e2c969d032f$export$2e2bcd8739ae039","fn","thisArg","apply","arguments","cache","$8ca3655f37d9652c$var$toString","prototype","toString","$8ca3655f37d9652c$var$getPrototypeOf","getPrototypeOf","$8ca3655f37d9652c$var$kindOf","create","thing","str","toLowerCase","$8ca3655f37d9652c$var$kindOfTest","type","$8ca3655f37d9652c$var$typeOfTest","$parcel$interopDefault","$8ca3655f37d9652c$var$isArray","Array","isArray","$8ca3655f37d9652c$var$isUndefined","$8ca3655f37d9652c$var$isArrayBuffer","$8ca3655f37d9652c$var$isString","$8ca3655f37d9652c$var$isFunction","$8ca3655f37d9652c$var$isNumber","$8ca3655f37d9652c$var$isObject","$8ca3655f37d9652c$var$isPlainObject","val","Symbol","toStringTag","iterator","$8ca3655f37d9652c$var$isDate","$8ca3655f37d9652c$var$isFile","$8ca3655f37d9652c$var$isBlob","$8ca3655f37d9652c$var$isFileList","$8ca3655f37d9652c$var$isURLSearchParams","$8ca3655f37d9652c$var$forEach","i","l","ref","_allOwnKeys","allOwnKeys","keys","getOwnPropertyNames","len","$8ca3655f37d9652c$var$findKey","_key","$8ca3655f37d9652c$var$_global","self","$parcel$global","undefined","$8ca3655f37d9652c$var$isContextDefined","context","TypedArray","hasOwnProperty1","$8ca3655f37d9652c$var$isTypedArray","Uint8Array","$8ca3655f37d9652c$var$isHTMLForm","$8ca3655f37d9652c$var$hasOwnProperty","hasOwnProperty","prop","$8ca3655f37d9652c$var$isRegExp","$8ca3655f37d9652c$var$reduceDescriptors","reducer","descriptors","getOwnPropertyDescriptors","reducedDescriptors","defineProperties","$8ca3655f37d9652c$export$2e2bcd8739ae039","isArrayBuffer","isBuffer","constructor","isFormData","pattern","FormData","isArrayBufferView","ArrayBuffer","isView","buffer","isString","isNumber","isBoolean","isObject","isPlainObject","isUndefined","isDate","isFile","isBlob","isRegExp","isFunction","isStream","pipe","isURLSearchParams","isTypedArray","isFileList","forEach","merge","$8ca3655f37d9652c$var$merge","caseless","this","result","assignValue","targetKey","extend","a","b","trim","replace","stripBOM","content","charCodeAt","inherits","superConstructor","props","assign","toFlatObject","sourceObj","destObj","filter","propFilter","merged","kindOf","kindOfTest","endsWith","searchString","position","String","lastIndex","indexOf","toArray","arr","forEachEntry","next","done","pair","matchAll","regExp","matches","exec","push","isHTMLForm","hasOwnProp","reduceDescriptors","freezeMethods","enumerable","Error","toObjectSet","arrayOrString","delimiter","define","split","toCamelCase","m","p1","p2","toUpperCase","noop","toFiniteNumber","defaultValue","Number","isFinite","findKey","global","isContextDefined","toJSONObject","stack","visit","source","target","reducedValue","$44aee3fe793a4c74$var$AxiosError","message","code","config","request","response","captureStackTrace","$8ca3655f37d9652c$exports","toJSON","description","number","fileName","lineNumber","columnNumber","status","$44aee3fe793a4c74$var$prototype","$44aee3fe793a4c74$var$descriptors","from","error","customProps","axiosError","cause","$24f87a6f86a8996f$export$a143d493d941bafc","$3caef5c332c7293f$export$d622b2ad8d90c771","$3caef5c332c7293f$export$6100ba28696e12de","$44aee3fe793a4c74$export$2e2bcd8739ae039","$c764dedfb56f5a44$export$2e2bcd8739ae039","window","$ds8z5","b64","tmp","i1","lens","$3caef5c332c7293f$var$getLens","validLen","placeHoldersLen","$3caef5c332c7293f$var$Arr","$3caef5c332c7293f$var$_byteLength","curByte","len2","$3caef5c332c7293f$var$revLookup","uint8","len3","extraBytes","parts","maxChunkLength","i3","$3caef5c332c7293f$var$encodeChunk","$3caef5c332c7293f$var$lookup","$56a54f6ebabce67d$export$aafa59e2e03f2942","$56a54f6ebabce67d$export$68d8715fc104d294","$3caef5c332c7293f$var$code","$3caef5c332c7293f$var$i","$3caef5c332c7293f$var$len","len1","start","end","num","output","i2","offset","isLE","mLen","nBytes","e","eLen","eMax","eBias","nBits","d","s","NaN","Infinity","Math","pow","c","rt","abs","isNaN","floor","log","LN2","$24f87a6f86a8996f$var$customInspectSymbol","$24f87a6f86a8996f$var$Buffer","$24f87a6f86a8996f$var$K_MAX_LENGTH","$24f87a6f86a8996f$var$createBuffer","RangeError","buf","setPrototypeOf","arg","encodingOrOffset","$24f87a6f86a8996f$var$allocUnsafe","$24f87a6f86a8996f$var$from","string","encoding","isEncoding","$24f87a6f86a8996f$var$byteLength","actual","write","$24f87a6f86a8996f$var$fromString","arrayView","$24f87a6f86a8996f$var$isInstance","copy","$24f87a6f86a8996f$var$fromArrayBuffer","byteOffset","byteLength","$24f87a6f86a8996f$var$fromArrayLike","$24f87a6f86a8996f$var$fromArrayView","SharedArrayBuffer","valueOf","$24f87a6f86a8996f$var$checked","$24f87a6f86a8996f$var$numberIsNaN","$24f87a6f86a8996f$var$fromObject","toPrimitive","$24f87a6f86a8996f$var$assertSize","size","array","mustMatch","loweredCase","$24f87a6f86a8996f$var$utf8ToBytes","$24f87a6f86a8996f$var$base64ToBytes","$24f87a6f86a8996f$var$slowToString","$24f87a6f86a8996f$var$hexSlice","$24f87a6f86a8996f$var$utf8Slice","$24f87a6f86a8996f$var$asciiSlice","$24f87a6f86a8996f$var$latin1Slice","$24f87a6f86a8996f$var$base64Slice","$24f87a6f86a8996f$var$utf16leSlice","$24f87a6f86a8996f$var$swap","n","$24f87a6f86a8996f$var$bidirectionalIndexOf","dir","$24f87a6f86a8996f$var$arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","j","$24f87a6f86a8996f$var$hexWrite","remaining","strLen","parsed","parseInt","substr","$24f87a6f86a8996f$var$utf8Write","$24f87a6f86a8996f$var$blitBuffer","$24f87a6f86a8996f$var$asciiWrite","byteArray","$24f87a6f86a8996f$var$asciiToBytes","$24f87a6f86a8996f$var$base64Write","$24f87a6f86a8996f$var$ucs2Write","units","hi","lo","$24f87a6f86a8996f$var$utf16leToBytes","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","$24f87a6f86a8996f$var$MAX_ARGUMENTS_LENGTH","fromCharCode","$24f87a6f86a8996f$var$decodeCodePointsArray","TYPED_ARRAY_SUPPORT","proto","foo","$24f87a6f86a8996f$var$typedArraySupport","console","poolSize","alloc","fill","$24f87a6f86a8996f$var$alloc","allocUnsafe","allocUnsafeSlow","_isBuffer","compare","x","y","list","pos","swap16","swap32","swap64","toLocaleString","equals","inspect","thisStart","thisEnd","thisCopy","targetCopy","includes","_arr","ret","out","$24f87a6f86a8996f$var$hexSliceLookupTable","bytes","$24f87a6f86a8996f$var$checkOffset","ext","$24f87a6f86a8996f$var$checkInt","max","$24f87a6f86a8996f$var$wrtBigUInt64LE","$24f87a6f86a8996f$var$checkIntBI","BigInt","$24f87a6f86a8996f$var$wrtBigUInt64BE","$24f87a6f86a8996f$var$checkIEEE754","$24f87a6f86a8996f$var$writeFloat","littleEndian","noAssert","$24f87a6f86a8996f$var$writeDouble","newBuf","subarray","readUintLE","readUIntLE","byteLength1","mul","readUintBE","readUIntBE","byteLength2","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readUInt32BE","readBigUInt64LE","$24f87a6f86a8996f$var$defineBigIntMethod","$24f87a6f86a8996f$var$validateNumber","first","last","$24f87a6f86a8996f$var$boundsError","readBigUInt64BE","readIntLE","byteLength3","readIntBE","byteLength4","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readBigInt64LE","readBigInt64BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUintLE","writeUIntLE","byteLength5","writeUintBE","writeUIntBE","byteLength6","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","byteLength7","limit","sub","writeIntBE","byteLength8","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","$24f87a6f86a8996f$var$errors","$24f87a6f86a8996f$var$E","sym","getMessage","Base1","Base","NodeError","_this","configurable","$24f87a6f86a8996f$var$addNumericalSeparator","byteLength10","range","ERR_OUT_OF_RANGE","byteLength9","$24f87a6f86a8996f$var$checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","input","msg","received","isInteger","$24f87a6f86a8996f$var$INVALID_BASE64_RE","leadSurrogate","$24f87a6f86a8996f$var$base64clean","src","dst","alphabet","table","i16","$24f87a6f86a8996f$var$BufferBigIntNotDefined","$0c29ca57d54f85e9$var$isVisitable","$0c29ca57d54f85e9$var$removeBrackets","$0c29ca57d54f85e9$var$renderKey","path","dots","token","$0c29ca57d54f85e9$var$predicates","test","$0c29ca57d54f85e9$export$2e2bcd8739ae039","formData","options","metaTokens","indexes","option","visitor","defaultVisitor","useBlob","Blob","append","convertValue","toISOString","$0c29ca57d54f85e9$require$Buffer","JSON","stringify","some","$0c29ca57d54f85e9$var$isFlatArray","el","index","exposedHelpers","isVisitable","build","pop","$63e4e0dff2b7ef1a$var$encode","charMap","encodeURIComponent","match","$63e4e0dff2b7ef1a$var$AxiosURLSearchParams","params","_pairs","$63e4e0dff2b7ef1a$var$prototype","encoder","_encode","$63e4e0dff2b7ef1a$export$2e2bcd8739ae039","$4858799f155a4706$var$encode","$4858799f155a4706$export$2e2bcd8739ae039","url","serializedParams","encode","serializeFn","serialize","hashmarkIndex","product","$089e14d5c08cea15$var$InterceptorManager","InterceptorManager","handlers","fulfilled","rejected","synchronous","runWhen","h","$089e14d5c08cea15$export$2e2bcd8739ae039","$c54b4d6d29e2eb6b$export$2e2bcd8739ae039","silentJSONParsing","forcedJSONParsing","clarifyTimeoutError","$d2ba66411c13cc9b$export$2e2bcd8739ae039","URLSearchParams","$7cdf1698dc68a071$export$2e2bcd8739ae039","$97999e9cdfd9bdaf$var$isStandardBrowserEnv","navigator","$97999e9cdfd9bdaf$export$2e2bcd8739ae039","isBrowser","classes","isStandardBrowserEnv","protocols","$3444de215011fd2b$export$2e2bcd8739ae039","helpers","isNode","$bdd273a6ec9f935e$export$2e2bcd8739ae039","buildPath","isNumericKey","isLast","$bdd273a6ec9f935e$var$arrayToObject","entries","$bdd273a6ec9f935e$var$parsePropPath","$8d19883a18ea96be$var$DEFAULT_CONTENT_TYPE","$8d19883a18ea96be$var$defaults","transitional","adapter","transformRequest","headers","contentType","getContentType","hasJSONContentType","isObjectPayload","setContentType","formSerializer","_FormData","env","rawValue","parser","parse","$8d19883a18ea96be$var$stringifySafely","transformResponse","JSONRequested","responseType","strictJSONParsing","ERR_BAD_RESPONSE","timeout","xsrfCookieName","xsrfHeaderName","maxContentLength","maxBodyLength","validateStatus","common","Accept","method","$8d19883a18ea96be$export$2e2bcd8739ae039","$102410410d0dc09d$var$ignoreDuplicateOf","$c2923f037e2bae4f$var$$internals","$c2923f037e2bae4f$var$normalizeHeader","header","$c2923f037e2bae4f$var$normalizeValue","$c2923f037e2bae4f$var$matchHeaderValue","$c2923f037e2bae4f$var$_iterator","$c2923f037e2bae4f$var$_toStringTag","$c2923f037e2bae4f$var$AxiosHeaders","AxiosHeaders","valueOrRewrite","rewrite","setHeader","_value","_header","_rewrite","lHeader","rawHeaders","setHeaders","line","substring","tokens","tokensRE","$c2923f037e2bae4f$var$parseTokens","matcher","deleted","deleteHeader","delete","bind","format","normalized","w","char","$c2923f037e2bae4f$var$formatHeader","_len","targets","_constructor","$8nrFW","asStrings","_param","computed","accessors","defineAccessor","accessorName","methodName","arg1","arg2","arg3","$c2923f037e2bae4f$var$buildAccessors","accessor","$c2923f037e2bae4f$export$2e2bcd8739ae039","$e27ce2658796d30f$export$2e2bcd8739ae039","fns","normalize","$ffcdf0443516cf49$export$2e2bcd8739ae039","__CANCEL__","$a251e9fa67c89486$var$CanceledError","ERR_CANCELED","$a251e9fa67c89486$export$2e2bcd8739ae039","$df046ee58fb378eb$export$2e2bcd8739ae039","resolve","reject","ERR_BAD_REQUEST","$e52288d5ced91a0f$export$2e2bcd8739ae039","expires","domain","secure","cookie","Date","toGMTString","RegExp","decodeURIComponent","remove","now","$b453718e09262365$export$2e2bcd8739ae039","baseURL","relativeURL","$c5c7eeec01fb8b89$export$2e2bcd8739ae039","requestedURL","$6c85e22328488296$export$2e2bcd8739ae039","originURL","msie","userAgent","urlParsingNode","createElement","resolveURL","href","setAttribute","protocol","host","search","hash","hostname","port","pathname","charAt","location","requestURL","$a1af1a7f806b22ba$export$2e2bcd8739ae039","samplesCount","firstSampleTS","timestamps","head","tail","chunkLength","startedAt","bytesCount","passed","round","$85bd0ac91b9e9771$var$progressEventReducer","listener","isDownloadStream","bytesNotified","_speedometer","loaded","total","lengthComputable","progressBytes","rate","progress","estimated","event","$85bd0ac91b9e9771$export$2e2bcd8739ae039","XMLHttpRequest","Promise","onCanceled","requestData","requestHeaders","cancelToken","unsubscribe","signal","removeEventListener","auth","username","password","unescape","btoa","fullPath","onloadend","responseHeaders","getAllResponseHeaders","err","responseText","statusText","open","paramsSerializer","onreadystatechange","readyState","responseURL","setTimeout","onabort","ECONNABORTED","onerror","ERR_NETWORK","ontimeout","timeoutErrorMessage","ETIMEDOUT","xsrfValue","withCredentials","setRequestHeader","onDownloadProgress","addEventListener","onUploadProgress","upload","cancel","abort","subscribe","aborted","send","$b57d5c296e05dd0f$var$knownAdapters","http","xhr","$b57d5c296e05dd0f$export$2e2bcd8739ae039","getAdapter","adapters","nameOrAdapter","$03c1ec60679d4a92$var$throwIfCancellationRequested","throwIfRequested","$03c1ec60679d4a92$export$2e2bcd8739ae039","then","reason","$ed738da9502ca495$var$headersToObject","$ed738da9502ca495$export$2e2bcd8739ae039","config1","config2","getMergedValue","mergeDeepProperties","valueFromConfig2","defaultToConfig2","mergeDirectKeys","mergeMap","timeoutMessage","decompress","beforeRedirect","transport","httpAgent","httpsAgent","socketPath","responseEncoding","configValue","$f1f155cc89389bcb$export$a4ad2735b021c132","$73047b42f9e782d3$var$validators","$73047b42f9e782d3$var$deprecatedWarnings","validator","version","formatMessage","opt","desc","opts","ERR_DEPRECATED","warn","$73047b42f9e782d3$export$2e2bcd8739ae039","assertOptions","schema","allowUnknown","ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","validators","$6c6ea2375c06af66$var$validators","$6c6ea2375c06af66$var$Axios","Axios","instanceConfig","defaults","interceptors","configOrUrl","contextHeaders","boolean","function","requestInterceptorChain","synchronousRequestInterceptors","interceptor","unshift","promise","responseInterceptorChain","chain","newConfig","onFulfilled","onRejected","generateHTTPMethod","isForm","$6c6ea2375c06af66$export$2e2bcd8739ae039","$52ff30ac6ac58fe8$export$2e2bcd8739ae039","CancelToken","executor","resolvePromise","_listeners","onfulfilled","_resolve","splice","$eb999ef253053d6e$var$axios","$eb999ef253053d6e$var$createInstance","defaultConfig","instance","CanceledError","isCancel","VERSION","toFormData","AxiosError","Cancel","all","promises","spread","callback","isAxiosError","payload","formToJSON","$eb999ef253053d6e$export$2e2bcd8739ae039","$d513311671ccd046$var$_API_KEY","WeakMap","$d513311671ccd046$var$_totalPages","$d513311671ccd046$var$FetchFilmsApi","FetchFilmsApi","query","page","mediaType","timeWindow","$2TvXO","mark","_callee","resp","_ctx","sent","_mediaType","_timeWindow","fetchWithAllFilmsData","total_pages","t0","fetchWithCurrentFilm","fetchFilmTrailerById","lang","include_adult","genreType","_genreType","_page","fetchGenresList","_lang","_include_adult","fetchWithSearchFilmData","step","_step","newPage","newQuery","newValue","$d513311671ccd046$export$2e2bcd8739ae039","$9df926e0a287432e$exports","e1","t","o","r","u","c1","e2","n1","visible","_$t","children","firstChild","tagName","ownerDocument","body","contains","e3","n2","_$t1","e4","className","appendChild","classList","add","_$n","HTMLElement","cloneNode","_$e","closable","onShow","onClose","c2","e5","u1","parentElement","removeChild","element","show","e6","requestAnimationFrame","close","$bd7d422958c38bfc$export$a5109aefef9dcd91","trailers","findTrailer","video","$4c3d3dadf4b4ba89$var$fetchApi","$4c3d3dadf4b4ba89$var$renderApi","$4c3d3dadf4b4ba89$var$_onShowTrailer","idTrailer","showTrailersRequest","showTrailers","trailer","instance1","onPressEsc","currentTarget","dataset","getFilmTrailerById","results","createModalWithoutFilmTrailer","once","createModalFilmTrailer","$7553585f1db4be65$export$c4ade6de051a1e37","vote_average","popularity","roundVote","toFixed","roundPopularity","$f92197e8a4d76a14$var$fetchApi","$f92197e8a4d76a14$var$renderApi","$f92197e8a4d76a14$export$7e6dacf9666af9b","$f92197e8a4d76a14$export$637acd40e5ad0fad","$f92197e8a4d76a14$var$_onShowFilmModal","moreInfo","moreInfoObj","addToQueue","addToWatch","style","overflow","getCurrentFilm","createModalFilmDetails","onclick","closest","$8887af810405d0dc$export$95ccbcd7a17b3326","$8887af810405d0dc$export$ad8604ad72dea30f","$8887af810405d0dc$export$f21a8bb784153c25","values","$4c3d3dadf4b4ba89$export$2e2bcd8739ae039","$hKHmD","$a9d69158b154a93b$var$SDK_VERSION","DOMStorageWrapper","domStorage_","prefix_","$a2hTj","removeItem","prefixedName_","setItem","$2xDiJ","storedVal","getItem","$a9d69158b154a93b$var$MemoryStorage","MemoryStorage","cache_","isInMemoryStorage","$a9d69158b154a93b$var$createStoragefor","domStorageName","domStorage","$a9d69158b154a93b$var$DOMStorageWrapper","$a9d69158b154a93b$var$PersistentStorage","$a9d69158b154a93b$var$SessionStorage","$kZfxc","Logger","stringToByteArray","sha11","digest","base64","encodeByteArray","sha1Bytes","varArgs","$a9d69158b154a93b$var$buildLogMessage_","$a9d69158b154a93b$var$logger","$a9d69158b154a93b$var$enableLogging$1","logger_","persistent","assert","$a9d69158b154a93b$var$logClient","logLevel","LogLevel","VERBOSE","$a9d69158b154a93b$var$log","$a9d69158b154a93b$var$firstLog_","$a9d69158b154a93b$var$logWrapper","prefix","$a9d69158b154a93b$var$error","$a9d69158b154a93b$var$fatal","$a9d69158b154a93b$var$isInvalidJSONNumber","POSITIVE_INFINITY","NEGATIVE_INFINITY","$a9d69158b154a93b$var$MIN_NAME","$a9d69158b154a93b$var$MAX_NAME","$a9d69158b154a93b$var$nameCompare","bAsInt","$a9d69158b154a93b$var$stringCompare","$a9d69158b154a93b$var$ObjectToUniqueKey","k","sort","segsize","v","f","ln","bias","hexByte","time","Deno","unrefTimer","AppCheckTokenProvider","appName_","appCheckProvider","getImmediate","appCheck","getToken","forceRefresh","_this1","_a","addTokenListener","$a9d69158b154a93b$var$warn","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","optional","onInit","catch","_this2","addAuthTokenListener","removeAuthTokenListener","errorMessage","$a9d69158b154a93b$var$EmulatorTokenProvider","EmulatorTokenProvider","accessToken","namespace","webSocketOnly","persistenceKey","includeNamespaceInQueryParams","RepoInfo","nodeAdmin","_host","internalHost","_domain","newHost","isCacheableHost","query2","repoInfo","connURL","$a9d69158b154a93b$var$LONG_POLLING","isCustomHost","pairs","StatsCollection","name2","amount","counters_","hashString","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","responseNum","requestNum","_loop","toProcess","$a9d69158b154a93b$var$exceptionGuard","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","BrowserPollConnection","bytesSent","$a9d69158b154a93b$var$statsManagerGetCollection","$a9d69158b154a93b$var$APP_CHECK_TOKEN_PARAM","_this4","curSegmentNum","onDisconnect_","onDisconnect1","myPacketOrderer","$a9d69158b154a93b$var$PacketReceiver","onMessage","isClosed_","onClosed_","isNodeSdk","called","wrappedFn","attachEvent","_this3","args","_args","$1t1Wn","command","incrementIncomingBytes_","scriptTagHolder","connectTimeoutTimer_","everConnected_","$a9d69158b154a93b$var$FIREBASE_LONGPOLL_START_PARAM","sendNewPolls","closeAfter","handleResponse","pN","urlParams","random","$a9d69158b154a93b$var$PROTOCOL_VERSION","connectURL","urlFn","log_","addTag","startLongPoll","addDisconnectPingFrame","myDisconnFrame","clearTimeout","shutdown_","dataStr","stats_","incrementCounter","base64data","base64Encode","dataSegs","$a9d69158b154a93b$var$splitStringBySize","$a9d69158b154a93b$var$MAX_URL_DATA_SIZE","enqueueSegment","pw","display","bytesReceived","forceAllow_","forceDisallow_","FirebaseIFrameScriptHolder","commandCB","onMessageCB","onDisconnect2","Set","currentSerial","uniqueCallbackIdentifier","myIFrame","createIFrame_","script","iframeContents","doc","alive","onDisconnect3","onDisconnect","myPW","newRequest_","outstandingRequests","pendingSegs","theURL","curDataString","theSeg","shift","seg","ts","addLongPollTag_","segnum","serial","doNewRequest","keepaliveTimeout","loadCB","_this5","newScript","onload","rstate","parentNode","iframe","contentWindow","contentDocument","$a9d69158b154a93b$var$WebSocketImpl","MozWebSocket","WebSocket","connectionURL_","WebSocketConnection","onDisconnect4","device","$6qd2L","platform","proxy","origin","mySock","onopen","onclose","handleIncomingFrame","frames","totalFrames","fullMess","jsonMess","jsonEval","frameCount","handleNewFrameCount_","mess","appendFrame_","remainingData","extractFrameCount_","resetKeepAlive","sendString_","keepaliveTimer","setInterval","$a9d69158b154a93b$var$FORGE_DOMAIN_RE","isOldAndroid","oldAndroidMatch","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","isWebSocketsAvailable","$a9d69158b154a93b$var$WebSocketConnection","isSkipPollConnection","previouslyFailed","_iterator","ALL_TRANSPORTS","_iteratorNormalCompletion","transports","_iteratorError","return","_didIteratorError","transports_","globalTransportInitialized_","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","pendingDataMessages","$a9d69158b154a93b$var$TransportManager","conn","transportManager_","initialTransport","conn_","nextTransportId_","onConnectionLost","disconnReceiver_","tx_","healthyTimeout_","isHealthy_","markConnectionHealthy","healthyTimeoutMS","connectionCount","onConnectionLost_","everConnected","secondaryConn_","onSecondaryConnectionLost_","rx_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","dataMsg","sendData_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","$a9d69158b154a93b$var$requireKey","onSecondaryControl_","proceedWithUpgrade_","tryCleanupConnection","onDataMessage_","onPrimaryResponse_","primaryResponsesRequired_","onConnectionShutdown_","sendPingOnPrimaryIfNecessary_","sessionId","handshake","state_","onConnectionEstablished_","timestamp","version2","upgradeTransport","startUpgrade_","onDisconnect5","$a9d69158b154a93b$var$setTimeoutNonBlocking","closeConnections_","start_","ServerActions","pathString","onComplete","stats","allowedEvents_","EventEmitter","eventType","listeners_","listeners","validateEventType_","eventData","getInitialEvent","et","$eYQtU","OnlineMonitor","$2MbLg","_super","online_","isMobileCordova","trigger","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","Path","begin","pieces","childPathObj","$a9d69158b154a93b$var$Path","$a9d69158b154a93b$var$newRelativePath","outerPath","innerPath","outer","inner","$a9d69158b154a93b$var$pathPopFront","other","$a9d69158b154a93b$var$pathGetLength","ValidationPath","errorPrefix_","byteLength_","parts_","stringLength","validationPath","$a9d69158b154a93b$var$validationPathToErrorString","VisibilityMonitor","visibilityChange","hidden","visible_","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","Map","$a9d69158b154a93b$var$RECONNECT_MIN_DELAY","realtime_","$a9d69158b154a93b$var$OnlineMonitor","getInstance","on","onOnline_","onResponse","curReqNum","requestNumber_","connected_","requestCBHash_","initConnection_","Deferred","_path","query4","currentHashFn","tag","queryId","listens","listenSpec","sendListen_","get1","outstandingGets_","sendRequest","outstandingGetCount_","query5","_queryIdentifier","req","p","_queryObject","hashFn","warnOnListenWarnings_","reduceReconnectDelayIfAdminCredential_","credential","tryAppCheck","authMethod","isValidFormat","onAuthRevoked_","invalidAppCheckTokenCount_","onAppCheckRevoked_","query6","sendUnlisten_","queryObj","sendOnDisconnect_","onDisconnectRequestQueue_","putInternal","outstandingPuts_","outstandingPutCount_","queued","errorReason","reqNum","onDataPush_","onSecurityDebugPacket_","lastConnectionEstablishedTime_","getTime","handleTimestamp_","firstConnection_","sendConnectStats_","restoreState_","establishConnectionTimer_","establishConnection_","scheduleConnect_","reconnectDelay_","maxReconnectDelay_","online","cancelSentTransactions_","shouldReconnect_","lastConnectionAttemptTime_","timeSinceLastConnectAttempt","reconnectDelay","prev","onDataMessage","onReady","onDisconnect6","onRealtimeDisconnect_","nextConnectionId_","canceled","sendRequestFn","closeFn","forceTokenRefresh_","t1","ref1","connection","$a9d69158b154a93b$var$Connection","t2","interruptReasons_","delta","put","query7","q","removeListen_","listen","normalizedPathString","map1","statusCode","explanation","invalidAuthTokenCount_","notifyForInvalidToken","tryAuth","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","queries","setMaxNode","MAX_NODE","sendGet_","clientName","isReactNative","reportStats","isEmpty","warnings","safeGet","indexSpec","query8","_queryParams","getIndex","name3","node","NamedNode","Index","oldNode","newNode","oldWrapped","$a9d69158b154a93b$var$NamedNode","newWrapped","MIN","KeyIndex","assertionError","$a9d69158b154a93b$var$KeyIndex","startKey","comparator","isReverse_","SortedMapIterator","cmp","right","nodeStack_","left","resultGenerator_","LLRBNode","color","RED","$a9d69158b154a93b$var$SortedMap","EMPTY_NODE","count","inorderTraversal","reverseTraversal","min_","maxKey","insert","fixUp_","smallest","isRed_","rotateRight_","moveRedRight_","removeMin_","colorFlip_","rotateLeft_","nl","nr","blackDepth","check_","BLACK","LLRBEmptyNode","$a9d69158b154a93b$var$LLRBNode","comparator_","SortedMap","root_","rightParent","minKey","setPriorityMaxNode","resultGenerator","$a9d69158b154a93b$var$SortedMapIterator","$a9d69158b154a93b$var$NAME_ONLY_COMPARATOR","$a9d69158b154a93b$var$NAME_COMPARATOR","$a9d69158b154a93b$var$LLRBEmptyNode","priority","$a9d69158b154a93b$var$doubleToIEEE754String","isLeafNode","priorityNode","$a9d69158b154a93b$var$MAX_NODE$2","getPriority","value_","priorityNode_","newPriorityNode","LeafNode","childName","__childrenNodeConstructor","childNode","newChildNode","front","$a9d69158b154a93b$var$pathGetFront","updateImmediateChild","updateChild","exportFormat","getValue","lazyHash_","toHash","$a9d69158b154a93b$var$priorityHashText","compareToLeafNode_","otherLeaf","otherIndex","VALUE_TYPE_ORDER","otherLeafType","thisIndex","thisLeafType","PriorityIndex","aPriority","bPriority","indexCmp","$a9d69158b154a93b$var$LeafNode","$a9d69158b154a93b$var$MAX_NODE$1","name5","$a9d69158b154a93b$var$PriorityIndex","Base12Num","bits","bits_","current_","childList","keyFn","mapSortFn","low","high","namedNode","middle","chunkSize","buildBalancedTree","attachPennant","pennant","base12","isOne","nextBitIsOne","chunkSize1","buildPennant","$a9d69158b154a93b$var$Base12Num","root1","indexes_","indexSet_","IndexMap","indexKey","sortedMap","indexDefinition","sawIndexedValue","iter","existingChildren","getIterator","Wrap","getNext","indexName","newIndexSet","newIndexes","indexedChildren","$a9d69158b154a93b$var$fallbackObject","$a9d69158b154a93b$var$buildChildSet","getCompare","existingSnap","newChildren","$a9d69158b154a93b$var$PRIORITY_INDEX","$a9d69158b154a93b$var$_defaultIndexMap","ChildrenNode","children_","indexMap_","$a9d69158b154a93b$var$validatePriorityNode","$a9d69158b154a93b$var$EMPTY_NODE","child2","getImmediateChild","getChild","updatePriority","newIndexMap","removeFromIndexes","addToIndexes","newPriority","newImmediateChild","numKeys","allIntegerKeys","forEachChild","INTEGER_REGEXP_","key1","$a9d69158b154a93b$var$sha1","idx","predecessor","getPredecessorKey","resolveIndex_","getFirstChildName","getLastChildName","wrappedNode","getIteratorFrom","startPost","peek","maxPost","endPost","getReverseIteratorFrom","$a9d69158b154a93b$var$KEY_INDEX","hasIndex","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","$a9d69158b154a93b$var$IndexMap","Default","$a9d69158b154a93b$var$MAX_NODE","ChildrenNode1","MaxNode","$a9d69158b154a93b$var$ChildrenNode","__EMPTY_NODE","$a9d69158b154a93b$var$nodeFromJSON","json","jsonLeaf","childData","childrenHavePriority","hinzeJsonObj","$a9d69158b154a93b$var$each","child3","childSet","sortedChildSet","PathIndex","indexPath_","snap","indexValue","name6","valueNode","$a9d69158b154a93b$var$pathSlice","$a9d69158b154a93b$var$ValueIndex","ValueIndex","compareTo","name7","$a9d69158b154a93b$var$VALUE_INDEX","$a9d69158b154a93b$var$changeValue","snapshotNode","$a9d69158b154a93b$var$changeChildAdded","$a9d69158b154a93b$var$changeChildRemoved","$a9d69158b154a93b$var$changeChildChanged","oldSnap","index_","IndexedFilter","newChild","affectedPath","optChangeAccumulator","oldChild","hasChild","trackChildChange","withIndex","newSnap","indexedFilter_","$a9d69158b154a93b$var$IndexedFilter","RangedFilter","getStartPost_","endPost_","getEndPost_","startPost_","isWithinStart","startIsInclusive_","getStartPost","isWithinEnd","endIsInclusive_","getEndPost","filtered","updateFullNode","makePost","getIndexStartValue","startName","minPost","hasEnd","LimitedFilter","withinDirectionalStart","reverse_","withinEndPost","withinStartPost","withinDirectionalEnd","compareRes","rangedFilter_","$a9d69158b154a93b$var$RangedFilter","limit_","getLimit","isViewFromLeft","startAfterSet_","endBeforeSet_","numChildren","getIndexedFilter","fullLimitUpdateChild_","isIndexed","hasNext","iterator1","getReverseIterator","next1","count1","childKey","childSnap","changeAccumulator","newChildNamedNode","windowBoundary","oldEventCache","getFirstChild","getLastChild","inRange","oldChildSnap","nextChild","getChildAfterChild","compareNext","newEventCache","QueryParams","startSet_","viewFrom_","indexStartValue_","startNameSet_","indexStartName_","endSet_","indexEndValue_","endNameSet_","indexEndName_","limitSet_","loadsAllData","copy1","queryParams","orderBy","$a9d69158b154a93b$var$PathIndex","qs","startParam","endParam","$a9d69158b154a93b$var$queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","query9","listenId","getListenId_","thisListen","queryStringParameters","$a9d69158b154a93b$var$queryParamsToRestQueryStringParameters","restRequest_","query10","query11","deferred","_this7","querystring","query12","isDefault","$a9d69158b154a93b$var$ServerActions","$a9d69158b154a93b$var$SnapshotHolder","SnapshotHolder","rootNode_","$a9d69158b154a93b$var$newSparseSnapshotTree","$a9d69158b154a93b$var$pathIsEmpty","sparseSnapshotTree","func","prefixPath","tree","$a9d69158b154a93b$var$OperationType","OperationType1","StatsListener","collection_","last_","newStats","stat","StatsReporter","collection","server_","statsToReport_","statsListener_","$a9d69158b154a93b$var$StatsListener","reportStats_","reportedStats","haveStatsToReport","$a9d69158b154a93b$var$emptyChildrenSingleton","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","childTree","subtree","$a9d69158b154a93b$var$newEmptyPath","ListenComplete","OVERWRITE","Overwrite","Merge","MERGE","$a9d69158b154a93b$var$CacheNode","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isCompleteForChild","EventGenerator","query_","eventGenerator","events","changes","registrations","eventCache","change","aWrapped","bWrapped","$a9d69158b154a93b$var$eventGeneratorCompareChanges","filteredChanges","materializedChange","prevName","getPredecessorChildName","$a9d69158b154a93b$var$eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","$a9d69158b154a93b$var$newViewCache","serverCache","$a9d69158b154a93b$var$viewCacheUpdateEventSnap","viewCache","eventSnap","complete","$a9d69158b154a93b$var$viewCacheUpdateServerSnap","serverSnap","$a9d69158b154a93b$var$viewCacheGetCompleteEventSnap","getNode","$a9d69158b154a93b$var$viewCacheGetCompleteServerSnap","$a9d69158b154a93b$var$EmptyChildren","$a9d69158b154a93b$var$ImmutableTree","ImmutableTree","relativePath","predicate","child5","childExistingPathAndValue","findRootMostMatchingPathAndValue","$a9d69158b154a93b$var$pathChild","toSet","child7","child8","newTree","fold_","pathSoFar","accum","pathToFollow","currentRelativePath","foreachOnPath_","foreach_","childPath","$a9d69158b154a93b$var$CompoundWrite","CompoundWrite","writeTree_","$a9d69158b154a93b$var$compoundWriteAddWrite","compoundWrite","rootmost","findRootMostValueAndPath","rootMostPath","newWriteTree1","setTree","$a9d69158b154a93b$var$compoundWriteAddWrites","updates","newWrite","$a9d69158b154a93b$var$compoundWriteRemoveWrite","empty","newWriteTree2","$a9d69158b154a93b$var$compoundWriteHasCompleteWrite","$a9d69158b154a93b$var$compoundWriteGetCompleteNode","$a9d69158b154a93b$var$compoundWriteGetCompleteChildren","$a9d69158b154a93b$var$compoundWriteChildCompoundWrite","shadowingNode","errorPrefixFxn","$a9d69158b154a93b$var$compoundWriteApply","writeTree","priorityWrite","$a9d69158b154a93b$var$applySubtreeWrite","$a9d69158b154a93b$var$writeTreeChildWrites","$a9d69158b154a93b$var$newWriteTreeRef","errorPrefix","allWrites","record","writeId","$a9d69158b154a93b$var$writeTreeRemoveWrite","findIndex","removedWriteWasVisible","writeToRemove","removedWriteOverlapsWithOtherWrites","currentWrite","$a9d69158b154a93b$var$writeTreeRecordContainsPath_","$a9d69158b154a93b$var$pathContains","visibleWrites","$a9d69158b154a93b$var$writeTreeLayerTree_","$a9d69158b154a93b$var$writeTreeDefaultFilter_","lastWriteId","$a9d69158b154a93b$var$writeTreeResetTree_","writeRecord","writes","treeRoot","writePath","child10","deepNode","$a9d69158b154a93b$var$writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","$a9d69158b154a93b$var$compoundWriteIsEmpty","$a9d69158b154a93b$var$writeTreeRefCalcCompleteEventCache","writeTreeRef","$a9d69158b154a93b$var$writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","$a9d69158b154a93b$var$writeTreeCalcCompleteEventChildren","$a9d69158b154a93b$var$writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","$a9d69158b154a93b$var$writeTreeRefShadowingWrite","$a9d69158b154a93b$var$writeTreeShadowingWrite","$a9d69158b154a93b$var$writeTreeRefCalcIndexedSlice","completeServerData","reverse","toIterate","nodes","$a9d69158b154a93b$var$writeTreeCalcIndexedSlice","$a9d69158b154a93b$var$writeTreeRefCalcCompleteChild","existingServerCache","$a9d69158b154a93b$var$writeTreeCalcCompleteChild","$a9d69158b154a93b$var$writeTreeRefChild","$a9d69158b154a93b$var$ChildChangeAccumulator","ChildChangeAccumulator","changeMap","oldChange","oldType","$a9d69158b154a93b$var$NO_COMPLETE_CHILD_SOURCE","NoCompleteChildSource_","child","$a9d69158b154a93b$var$WriteTreeCompleteChildSource","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","child11","$a9d69158b154a93b$var$viewProcessorApplyOperation","viewProcessor","oldViewCache","operation","writesCache","completeCache","newViewCache1","filterServerNode","accumulator","overwrite","fromUser","$a9d69158b154a93b$var$viewProcessorApplyUserOverwrite","fromServer","tagged","isFiltered","$a9d69158b154a93b$var$viewProcessorApplyServerOverwrite","$a9d69158b154a93b$var$viewProcessorCacheHasChild","curViewCache","foreach","$a9d69158b154a93b$var$viewProcessorApplyUserMerge","$a9d69158b154a93b$var$viewProcessorApplyServerMerge","ackUserWrite","serverChildren","$a9d69158b154a93b$var$viewProcessorRevertUserWrite","ackPath","changedChildren","name8","serverCachePath","mergePath","isCompleteForPath","changedChildren1","$a9d69158b154a93b$var$viewProcessorAckUserWrite","LISTEN_COMPLETE","oldServerNode","$a9d69158b154a93b$var$viewProcessorGenerateEventCacheAfterServerEvent","newViewCache5","$a9d69158b154a93b$var$viewProcessorListenComplete","getChanges","newViewCache2","isLeafOrEmpty","oldCompleteSnap","changePath","completeEventChildren","completeNode","oldEventNode","oldEventSnap","updatedPriority","newEventChild","childChangePath","eventChildUpdate","filtersNodes","changedSnap","newServerCache","serverFilter","oldServerSnap","newServerNode","newViewCache3","newViewCache4","getCompleteChild","$a9d69158b154a93b$var$pathGetBack","$a9d69158b154a93b$var$pathParent","$a9d69158b154a93b$var$viewProcessorApplyMerge","viewMergeTree","childMergeTree","isUnknownDeepMerge","$a9d69158b154a93b$var$View","View","initialViewCache","hasLimit","$a9d69158b154a93b$var$LimitedFilter","initialServerCache","initialEventCache","indexFilter","eventGenerator_","$a9d69158b154a93b$var$EventGenerator","view","$a9d69158b154a93b$var$viewIsEmpty","eventRegistrations_","$a9d69158b154a93b$var$viewRemoveEventRegistration","eventRegistration","cancelError","cancelEvents","existing","hasAnyCallback","processor_","moves","eventRegistrations","syncPoint","optCompleteServerCache","views","$a9d69158b154a93b$var$viewApplyOperation","view1","$a9d69158b154a93b$var$syncPointGetView","query13","serverCacheComplete","eventCacheComplete","query14","initialChanges","query15","$a9d69158b154a93b$var$syncPointHasCompleteView","viewQueryId","removed","view2","$a9d69158b154a93b$var$referenceConstructor$1","_repo","$a9d69158b154a93b$var$syncPointGetCompleteServerCache","$a9d69158b154a93b$var$viewGetCompleteServerCache","query16","$a9d69158b154a93b$var$syncPointGetCompleteView","$a9d69158b154a93b$var$syncPointViewExistsForQuery","query17","$a9d69158b154a93b$var$syncPointViewForQuery","SyncTree","listenProvider_","pendingWriteTree_","$a9d69158b154a93b$var$syncTreeApplyUserOverwrite","syncTree","newData","$a9d69158b154a93b$var$syncTreeApplyOperationToSyncPoints_","$a9d69158b154a93b$var$Overwrite","$a9d69158b154a93b$var$syncTreeAckUserWrite","$a9d69158b154a93b$var$writeTreeGetWrite","$a9d69158b154a93b$var$AckUserWrite","$a9d69158b154a93b$var$syncTreeApplyServerOverwrite","$a9d69158b154a93b$var$syncTreeRemoveEventRegistration","query18","skipListenerDedup","maybeSyncPoint","syncPointTree_","removedAndEvents","$a9d69158b154a93b$var$syncPointRemoveEventRegistration","$a9d69158b154a93b$var$syncPointIsEmpty","removingDefault","query19","covered","findOnPath","parentSyncPoint","newViews","$a9d69158b154a93b$var$syncTreeCollectDistinctViewsForSubTree_","$a9d69158b154a93b$var$syncTreeCreateListenerForView_","defaultTag","stopListening","$a9d69158b154a93b$var$syncTreeQueryForListening_","queryToRemove","$a9d69158b154a93b$var$syncTreeApplyTaggedQueryOverwrite","$a9d69158b154a93b$var$syncTreeQueryKeyForTag_","queryKey","$a9d69158b154a93b$var$syncTreeApplyTaggedOperation_","queryPath","query20","foreachOnPath","pathToSyncPoint","sp","foundAncestorDefaultView","$a9d69158b154a93b$var$SyncPoint","foreachChild","childSyncPoint","$a9d69158b154a93b$var$syncTreeMakeQueryKey_","queryToTagMap","tagToQueryMap","$a9d69158b154a93b$var$syncPointAddEventRegistration","skipSetupListener","$a9d69158b154a93b$var$syncTreeCalcCompleteEventCache","serverCache1","$a9d69158b154a93b$var$syncTreeGetServerValue","query21","serverCacheNode","$a9d69158b154a93b$var$viewGetCompleteNode","childWritesCache","$a9d69158b154a93b$var$syncTreeApplyOperationHelper_","childOperation","childServerCache","$a9d69158b154a93b$var$syncPointApplyOperation","syncPointTree","operationForChild","$a9d69158b154a93b$var$syncTreeTagForQuery","query22","$a9d69158b154a93b$var$syncTreeParseQueryKey_","$a9d69158b154a93b$var$ListenComplete","$a9d69158b154a93b$var$newOperationSourceServerTaggedQuery","$a9d69158b154a93b$var$syncTreeApplyTaggedListenComplete","$a9d69158b154a93b$var$syncTreeApplyListenComplete","query1","$a9d69158b154a93b$var$errorForServerCode","query23","query24","splitIndex","maybeChildSyncPoint","$a9d69158b154a93b$var$referenceConstructor","query25","$a9d69158b154a93b$var$syncTreeRemoveTags_","removedQueryKey","removedQuery","removedQueryTag","$a9d69158b154a93b$var$syncTreeGetNextQueryTag_","query26","view3","startListening","childMap","childQueries","queriesToStop","queryToStop","ExistingValueProvider","syncTree_","DeferredValueProvider","path_","existingVal","serverValues","$a9d69158b154a93b$var$resolveComplexDeferredValue","$a9d69158b154a93b$var$resolveScalarDeferredValue","op","existingNode","$a9d69158b154a93b$var$DeferredValueProvider","$a9d69158b154a93b$var$resolveDeferredLeafValue","rawPri","leafNode","childrenNode","$a9d69158b154a93b$var$resolveDeferredValue","name9","parent","childCount","Tree","$a9d69158b154a93b$var$treeSubTree","pathObj","child13","$a9d69158b154a93b$var$Tree","$a9d69158b154a93b$var$treeGetValue","$a9d69158b154a93b$var$treeSetValue","$a9d69158b154a93b$var$treeUpdateParents","$a9d69158b154a93b$var$treeHasChildren","includeSelf","childrenFirst","child15","$a9d69158b154a93b$var$treeGetPath","child16","childEmpty","$a9d69158b154a93b$var$treeIsEmpty","childExists","$a9d69158b154a93b$var$INVALID_KEY_REGEX_","$a9d69158b154a93b$var$INVALID_PATH_REGEX_","$a9d69158b154a93b$var$MAX_LEAF_SIZE_","$a9d69158b154a93b$var$isValidKey","$a9d69158b154a93b$var$isValidPathString","$a9d69158b154a93b$var$validateFirebaseDataArg","fnName","$a9d69158b154a93b$var$validateFirebaseData","errorPrefix1","$a9d69158b154a93b$var$ValidationPath","hasDotValue","hasActualChild","child1","$a9d69158b154a93b$export$8637b026ace8abb1","argumentName","enableLoggingImpl","creatorFunction","changeTree","fromObject","$a9d69158b154a93b$var$Merge","$5371e4edf6bc1c47$export$12edce60b21e0e26","userId","reference","$d3a3b55dfb4bac3b$export$47696dceb6464f60","$d3a3b55dfb4bac3b$var$db","app","$d3a3b55dfb4bac3b$export$1d7e849cefceba49","uid","email","displayName","$a9d69158b154a93b$export$adaa4cf7ef1b65be","$a9d69158b154a93b$export$eff4d24c3ff7876e","$d3a3b55dfb4bac3b$export$dd16f239af361e6e","currentFilmId","newPostRef","$a9d69158b154a93b$export$4cbf152802aa238","$d3a3b55dfb4bac3b$export$46b736a355b860be","refLink","userData","$a9d69158b154a93b$export$ad30f661f41f4d90","$a9d69158b154a93b$export$3988ae62b71be9a3","$a9d69158b154a93b$export$f9574b70e1d95d9d","snapshot","exists","preventDefault","$8887af810405d0dc$var$getCurrentUser","user","$gQOBw","getAuth","$iFsN9","currentUser","renderApiCopy","render","$952d868e7e85930a$var$auth","$952d868e7e85930a$var$signInLinck","$952d868e7e85930a$var$renderUserHeader","$952d868e7e85930a$var$_onSignIn","provider","GoogleAuthProvider","signInWithPopup","credentialFromResult","renderMarkup","createAuthorizatedUserHeaderMarkup","$dtYBq","notifySuccessMessage","errorCode","customData","credentialFromError","onAuthStateChanged","$57be10743d726c6f$export$2e2bcd8739ae039","$57be10743d726c6f$export$9fdba169d7561de8","addMessage","$52d0919cbc92f7ca$export$6465ae8726243ab1","$jxf8A","refs","searchError","$52d0919cbc92f7ca$var$renderApi","$52d0919cbc92f7ca$var$apiSearch","$52d0919cbc92f7ca$export$2e2bcd8739ae039","elements","search_user","actualQuery","incrementPage","$52d0919cbc92f7ca$var$_getSearchedFilm","films","genresObj","markup","getSearchFilmsData","getGenresList","createFilmCardsMarkup","form","root","factory","$56c406ef26e3b6a5$exports","newLoadingSettings","typesLoading","loadingSettings","ID","zindex","backgroundColor","rtl","fontFamily","cssAnimation","cssAnimationDuration","clickToClose","customSvgUrl","customSvgCode","svgSize","svgColor","messageID","messageFontSize","messageMaxLength","messageColor","commonConsoleError","commonCheckHeadOrBody","commonExtendOptions","extended","deep","commonGetPlaintext","html","htmlPool","textContent","innerText","loadingGetInternalCSSCodes","loadingCreate","loadingType","messageOrOptions","delay","Notiflix","Loading","init","newLoadingSettingsBackup","newOptions","width","messageHTML","svgIcon","loadingAndBlockSvgIconHourglass","loadingAndBlockSvgIconCircle","loadingAndBlockSvgIconArrows","loadingAndBlockSvgIconDots","loadingAndBlockSvgIconPulse","white","green","loadingAndBlockSvgIconNotiflix","svgSizeAsDigit","winWidth","innerWidth","maxSvgWidthPx","svgIconHTML","ntflxLoadingWrap","zIndex","background","animationDuration","flexWrap","flexDirection","alignItems","justifyContent","getElementById","loadingElm","timeout1","timeout2","userLoadingOptions","getInternalCSSCodes","styleElementId","internalCSS","commonSetInternalCSSCodes","userLoadingExtendOptions","standard","hourglass","circle","arrows","pulse","custom","notiflix","newMessage","messageWrap","oldMessageElm","getElementsByTagName","newMessageHTML","fontSize","loadingChangeMessage","amd","$bb806e2d7bceb951$var$SpinneroOnLoadingApi","SpinneroOnLoadingApi","label","_label","_options","intervalId","timeDelay","_timeDelay","_delayAfterStop","delayAfterStop","percentageLoading","clearInterval","disabled","$bb806e2d7bceb951$export$2e2bcd8739ae039","$9652aaa8971f5a76$export$aa9450a0fa5dc8b6","$7cec7432e83a878e$export$e9562cbc2a9880a8","totalPages","beforeContainer","afterContainer","beforeCurPageContainer","afterCurPageContainer","$8bee94e9c768a480$export$be3a0ca764f9df2b","$03da7ebcce7f049b$export$add40575555c273c","$03da7ebcce7f049b$var$_renderMarkup","$089c40fcbb903d20$export$adb4bb4243526aef","getAllFilmsData","$089c40fcbb903d20$export$db1d3739d208bc77","actualPage","headerUserLink","enabled","filmList","pagRef","currentPage","nextPage","prevPage","numbId"],"version":3,"file":"index.cedb1845.js.map"}