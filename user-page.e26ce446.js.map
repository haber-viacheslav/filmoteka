{"mappings":"oeAAAA,EAAA,S,WCAA,IAAAC,EAAAD,EAAA,S,0BAGAE,EAAAC,IACA,MAAMC,EAASC,SAASC,cAAc,iBACtCC,QAAQC,IAAIJ,GACZA,EAAOK,iBAAiB,SAExB,SAAkBC,GAChBA,EAAEC,iBACF,MAAMC,GAAO,EAAAX,EAAAY,YACb,EAAAZ,EAAAa,SAAQF,GACLG,MAAK,MAEJ,EAAAC,EAAAC,mBAAkB,kBAClBC,SAAW,kCAAkC,IAG9CC,OAAMC,IAELb,QAAQa,MAAMA,EAAM,G,ICpB1BpB,EAAA,S,8GAoBA,MAAMqB,EAAc,IAAI,EAAAC,EAAAC,SAClBC,EAAY,IAAI,EAAAC,EAAAF,SAEtBG,EAAAC,KAAKC,SAASnB,iBAAiB,SAI/B,SAAyBC,IACvB,EAAAT,EAAA4B,oBAAmBC,GAAMC,IACvB,GAAIA,EAAM,CAIR,MAAMC,EAAMD,EAAKC,KACjB,EAAAC,EAAAC,MAAI,EAAAD,EAAAE,QAAM,EAAAF,EAAAG,KAAIC,GAAK,SAASL,gBACzBjB,MAAKuB,IACJ,GAAIA,EAASC,SAAU,CACrB,MAAMC,EAAOF,EAASG,MACtBlC,QAAQC,IAAIgC,GACZ,MAAME,EAAOC,OAAOD,KAAKF,GACnBI,EAAO,GACb,IAAK,MAAMC,KAAOH,EAChBE,EAAKE,KAAKD,GAIZ,OADAtC,QAAQC,IAAIoC,GACLA,C,KAGV7B,MAAK6B,IACJrC,QAAQC,IAAIoC,GACZ,MAAMG,EAAa,GAEnB,IAAK,MAAMC,KAAUJ,EAAM,CACzB,MAAMK,EAAQ5B,EAAY6B,eAAe,CAAEC,GAAIH,IAC/CD,EAAWD,KAAKG,E,CAElBG,QAAQC,IAAIN,GAAYhC,MAAKuC,IAK3B9B,EAAU+B,aAAa,CACrBC,SAAU,qBACVC,WAAW,EACXC,iBAAkBlC,EAAUmC,0BAC1BL,EACAM,EAAAC,SAEF,GACF,IAEH1C,OAAM2C,GAAOvD,QAAQa,MAAM0C,I,MAG9B,EAAA9C,EAAA+C,sBAAqB,iBAAiB,G,IAnD5CrC,EAAAC,KAAKqC,WAAWvD,iBAAiB,SAuDjC,SAA2BC,IACzB,EAAAT,EAAA4B,oBAAmBC,GAAMC,IACvB,GAAIA,EAAM,CAIR,MAAMC,EAAMD,EAAKC,KACjB,EAAAC,EAAAC,MAAI,EAAAD,EAAAE,QAAM,EAAAF,EAAAG,KAAIC,GAAK,SAASL,kBACzBjB,MAAKuB,IACJ,GAAIA,EAASC,SAAU,CACrB,MAAMC,EAAOF,EAASG,MACtBlC,QAAQC,IAAIgC,GACZ,MAAME,EAAOC,OAAOD,KAAKF,GACnBI,EAAO,GACb,IAAK,MAAMC,KAAOH,EAChBE,EAAKE,KAAKD,GAIZ,OADAtC,QAAQC,IAAIoC,GACLA,C,KAGV7B,MAAK6B,IACJrC,QAAQC,IAAIoC,GACZ,MAAMG,EAAa,GAEnB,IAAK,MAAMC,KAAUJ,EAAM,CACzB,MAAMK,EAAQ5B,EAAY6B,eAAe,CAAEC,GAAIH,IAC/CD,EAAWD,KAAKG,E,CAElBG,QAAQC,IAAIN,GAAYhC,MAAKuC,IAK3B9B,EAAU+B,aAAa,CACrBC,SAAU,qBACVC,WAAW,EACXC,iBAAkBlC,EAAUmC,0BAC1BL,EACAM,EAAAC,SAEF,GACF,IAEH1C,OAAM2C,GAAOvD,QAAQa,MAAM0C,I,MAG9B,EAAA9C,EAAA+C,sBAAqB,iBAAiB,G,IAtG5C,MAAM1B,GAAK,EAAAJ,EAAAgC,aAAY/D,EAAAC,KACjB2B,GAAO,EAAA7B,EAAAY,SAAQX,EAAAC,K,yCFnBrBuB,EAAAC,KAAKuC,aAAazD,iBAAiB,QAAS0D,EAAAC","sources":["src/js/user-service/user.js","src/js/user-service/logOut.js","src/js/user-service/lib.js"],"sourcesContent":["import '../helpers/changeTheme';\nimport '../helpers/btnScroll';\nimport './logOut';\nimport './lib';\nimport '../modals/modals';\nimport { refs } from '../helpers/refsApiServ';\nimport { onShowFilmModal } from '../modals/filmDetailsModal';\nrefs.filmListUser.addEventListener('click', onShowFilmModal);\n","import { getAuth, signOut } from 'firebase/auth';\nimport { app } from '../firebase/initFirebase';\nimport { notifyInfoMessage } from '../helpers/notifyMessages';\napp;\nconst logOut = document.querySelector('.menu__logout');\nconsole.log(logOut);\nlogOut.addEventListener('click', onlogOut);\n\nfunction onlogOut(e) {\n  e.preventDefault();\n  const auth = getAuth();\n  signOut(auth)\n    .then(() => {\n      // Sign-out successful.\n      notifyInfoMessage('You loged out!');\n      location = 'http://localhost:1234/index.html';\n      //   window.open();\n    })\n    .catch(error => {\n      // An error happened.\n      console.error(error);\n    });\n}\n","import { async } from '@firebase/util';\nimport { onAuthStateChanged, getAuth } from 'firebase/auth';\nimport {\n  getDatabase,\n  ref,\n  onValue,\n  push,\n  set,\n  remove,\n  child,\n  get,\n  update,\n} from 'firebase/database';\nimport { app } from '../firebase/initFirebase';\nimport { refs } from '../helpers/refsApiServ';\nimport { genres } from '../helpers/genres';\n\nimport RenderApi from '../helpers/renderFuncApi';\nimport FetchFilmsApi from '../helpers/fetchFilmsApi';\nimport { notifyFailureMessage } from '../helpers/notifyMessages';\nconst libFetchApi = new FetchFilmsApi();\nconst libRender = new RenderApi();\n\nrefs.btnQueue.addEventListener('click', onBtnQueueClick);\nrefs.btnWatched.addEventListener('click', onBtnWatchedClick);\nconst db = getDatabase(app);\nconst auth = getAuth(app);\nfunction onBtnQueueClick(e) {\n  onAuthStateChanged(auth, user => {\n    if (user) {\n      // User is signed in, see docs for a list of available properties\n      // https://firebase.google.com/docs/reference/js/firebase.User\n\n      const uid = user.uid;\n      get(child(ref(db), `users/${uid}/userQueue`))\n        .then(snapshot => {\n          if (snapshot.exists()) {\n            const data = snapshot.val();\n            console.log(data);\n            const keys = Object.keys(data);\n            const resp = [];\n            for (const key of keys) {\n              resp.push(key);\n            }\n            //   const baseValues = Object\n            console.log(resp);\n            return resp;\n          }\n        })\n        .then(resp => {\n          console.log(resp);\n          const promiseArr = [];\n\n          for (const filmId of resp) {\n            const films = libFetchApi.getCurrentFilm({ id: filmId });\n            promiseArr.push(films);\n          }\n          Promise.all(promiseArr).then(value => {\n            // for (const filmObj of value) {\n            //   // console.log();\n\n            // }\n            libRender.renderMarkup({\n              selector: '.films__list--user',\n              innerHtml: true,\n              createMarkypFunc: libRender.createFilmUserCardsMarkup(\n                value,\n                genres\n              ),\n            });\n          });\n        })\n        .catch(err => console.error(err));\n      // ...\n    } else {\n      notifyFailureMessage('Please Log In!');\n    }\n  });\n}\nfunction onBtnWatchedClick(e) {\n  onAuthStateChanged(auth, user => {\n    if (user) {\n      // User is signed in, see docs for a list of available properties\n      // https://firebase.google.com/docs/reference/js/firebase.User\n\n      const uid = user.uid;\n      get(child(ref(db), `users/${uid}/userWatched`))\n        .then(snapshot => {\n          if (snapshot.exists()) {\n            const data = snapshot.val();\n            console.log(data);\n            const keys = Object.keys(data);\n            const resp = [];\n            for (const key of keys) {\n              resp.push(key);\n            }\n            //   const baseValues = Object\n            console.log(resp);\n            return resp;\n          }\n        })\n        .then(resp => {\n          console.log(resp);\n          const promiseArr = [];\n\n          for (const filmId of resp) {\n            const films = libFetchApi.getCurrentFilm({ id: filmId });\n            promiseArr.push(films);\n          }\n          Promise.all(promiseArr).then(value => {\n            // for (const filmObj of value) {\n            //   // console.log();\n\n            // }\n            libRender.renderMarkup({\n              selector: '.films__list--user',\n              innerHtml: true,\n              createMarkypFunc: libRender.createFilmUserCardsMarkup(\n                value,\n                genres\n              ),\n            });\n          });\n        })\n        .catch(err => console.error(err));\n      // ...\n    } else {\n      notifyFailureMessage('Please Log In!');\n    }\n  });\n}\n"],"names":["parcelRequire","$eyjy7","$jhtdw","app","$ae3ada067d22b1fd$var$logOut","document","querySelector","console","log","addEventListener","e","preventDefault","auth","getAuth","signOut","then","$d1BSM","notifyInfoMessage","location","catch","error","$fd6f99b8b709a605$var$libFetchApi","$awOEx","default","$fd6f99b8b709a605$var$libRender","$7RIyI","$dkKs9","refs","btnQueue","onAuthStateChanged","$fd6f99b8b709a605$var$auth","user","uid","$jAzyG","get","child","ref","$fd6f99b8b709a605$var$db","snapshot","exists","data","val","keys","Object","resp","key","push","promiseArr","filmId","films","getCurrentFilm","id","Promise","all","value","renderMarkup","selector","innerHtml","createMarkypFunc","createFilmUserCardsMarkup","$359X7","genres","err","notifyFailureMessage","btnWatched","getDatabase","filmListUser","$dLzFW","onShowFilmModal"],"version":3,"file":"user-page.e26ce446.js.map"}